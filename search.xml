<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>定时任务</title>
    <url>/2020/01/02/05-linux-Linux%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="4-1-系统定时任务"><a href="#4-1-系统定时任务" class="headerlink" title="4.1 系统定时任务"></a>4.1 系统定时任务</h3><h4 id="4-1-1-定时任务服务程序初识"><a href="#4-1-1-定时任务服务程序初识" class="headerlink" title="4.1.1 定时任务服务程序初识"></a>4.1.1 定时任务服务程序初识</h4><ol>
<li>作用：让指定任务可以在规定时间由系统自动执行</li>
<li>应用<ol>
<li>系统重要数据信息备份</li>
<li>系统信息做监控管理</li>
<li>系统日志切割功能</li>
</ol>
</li>
</ol>
<h4 id="4-1-2-定时任务实现方式"><a href="#4-1-2-定时任务实现方式" class="headerlink" title="4.1.2 定时任务实现方式"></a>4.1.2 定时任务实现方式</h4><ol>
<li><p>三种方式：</p>
<ol>
<li><p>按照定义时间完成任务：cronie定时任务软件</p>
</li>
<li><p>按照规定周期完成任务(小时、天、周、月)：anacron定时任务软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ll /etc/cron* -d</span><br><span class="line">输出：</span><br><span class="line">drwxr-xr-x. 2 root root  21 Nov  9 12:11 /etc/cron.d</span><br><span class="line">drwxr-xr-x. 2 root root  57 Nov 27 19:28 /etc/cron.daily <span class="comment"># 该目录下的文件按天执行</span></span><br><span class="line">-rw-------. 1 root root   0 Apr 11  2018 /etc/cron.deny</span><br><span class="line">drwxr-xr-x. 2 root root  22 Nov  9 12:11 /etc/cron.hourly <span class="comment"># 该目录下的文件按小时执行</span></span><br><span class="line">drwxr-xr-x. 2 root root   6 Jun 10  2014 /etc/cron.monthly <span class="comment"># 该目录下的文件按月执行</span></span><br><span class="line">-rw-r--r--. 1 root root 451 Jun 10  2014 /etc/crontab</span><br><span class="line">drwxr-xr-x. 2 root root   6 Jun 10  2014 /etc/cron.weekly <span class="comment"># 该目录下的文件按周执行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义任务后只执行一次：atd定时任务软件</p>
</li>
</ol>
</li>
<li><p>拓展：</p>
<ol>
<li>查看系统软件是否存在 → <code>rpm -qa cronie</code></li>
<li>查看软件部署后在系统中生成了哪些数据 → <code>rpm -ql cronie</code></li>
<li>查看某个服务软件的配置文件 → <code>rpm -qc cronie</code></li>
<li>查看某个命令属于哪个服务程序 → <code>rpm -qf /usr/sbin/crond</code></li>
</ol>
</li>
</ol>
<h4 id="4-1-3-定时任务安装部署"><a href="#4-1-3-定时任务安装部署" class="headerlink" title="4.1.3 定时任务安装部署"></a>4.1.3 定时任务安装部署</h4><ol>
<li>yum安装软件程序：<code>yum install -y cronie</code></li>
<li>启动服务程序：<code>systemctl start crond</code>、<code>systemctl enable crond</code></li>
<li>PS：该服务配置文件修改后，不需要重启服务</li>
</ol>
<h4 id="4-1-4-定时任务配置方法"><a href="#4-1-4-定时任务配置方法" class="headerlink" title="4.1.4 定时任务配置方法"></a>4.1.4 定时任务配置方法</h4><ol>
<li><p>一个命令(<code>crontab</code>)，两个文件</p>
</li>
<li><p>crontab的用法</p>
<ol>
<li><code>crontab -l</code>：显示当前定时任务配置信息</li>
<li><code>crontab -e</code>：可以实现编辑定时任务，相当于编辑<code>/var/spool/cron/root</code></li>
<li><code>crontab -u root -e</code>：以root用户身份配置定时任务</li>
</ol>
</li>
<li><p>配置文件：<code>/var/spool/cron/root</code></p>
</li>
<li><p>日志文件：<code>/var/log/cron</code></p>
</li>
<li><p>设置定时任务方法</p>
<ol>
<li><p>时间设定</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/cron</span><br><span class="line">=========================================</span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line">=========================================</span><br><span class="line">时间符号设置：</span><br><span class="line">*             代表每，例如 10 * * * * 代表每到10分钟的时候执行</span><br><span class="line">n,m        指定不连续的时间执行定时任务</span><br><span class="line">n-m        指定连续的时间执行定时任务</span><br><span class="line">*/n           每隔多久执行定时任务，会按照时间的整数倍执行，例如(00 */2 * * *) → 0-23中可以整除2的时间执行(0,2,4,6, ... 22)</span><br><span class="line">=========================================</span><br><span class="line">PS：时间之间有或者关系</span><br><span class="line">PS：大的时间确认之后，小的时间也需要确认</span><br><span class="line">=========================================</span><br><span class="line">crontab -e</span><br><span class="line">* * * * * <span class="built_in">echo</span> <span class="string">&quot;12345&quot;</span> &gt;&gt; /tmp/cron_test     <span class="comment"># 先写五个星号*，分别代表分时日月周</span></span><br><span class="line">10 * * * * <span class="built_in">echo</span> <span class="string">&quot;12345&quot;</span> &gt;&gt; /tmp/cron_test     <span class="comment"># 每天每小时的10分的时候执行</span></span><br><span class="line">00 09,12,14 * * * <span class="built_in">echo</span> <span class="string">&quot;12345&quot;</span> &gt;&gt; /tmp/cron_test     <span class="comment"># 每天的09:00，12:00，14:00执行</span></span><br><span class="line">00 09-11 * * * <span class="built_in">echo</span> <span class="string">&quot;12345&quot;</span> &gt;&gt; /tmp/cron_test     <span class="comment"># 每天的09:00，10:00，11:00执行</span></span><br><span class="line">00 */2 * * * <span class="built_in">echo</span> <span class="string">&quot;12345&quot;</span> &gt;&gt; /tmp/cron_test     <span class="comment"># 每隔两小时执行</span></span><br><span class="line">=========================================</span><br><span class="line">练习</span><br><span class="line">01. 每天12点执行定时任务：00 12 * * *</span><br><span class="line">02. 每天12,15,16点执行：00 12,15,16 * * *</span><br><span class="line">03. 每周五晚上10点执行任务：00 22 * * 5</span><br><span class="line">05. 每月5号执行定时任务：00 00 5 * *</span><br><span class="line">06. 每月10号周五执行定时任务：00 00 10 * 5     → 无意义</span><br></pre></td></tr></table></figure>
</li>
<li><p>任务设定(命令)</p>
</li>
</ol>
</li>
</ol>
<h4 id="4-1-5-定时任务编写注意事项"><a href="#4-1-5-定时任务编写注意事项" class="headerlink" title="4.1.5 定时任务编写注意事项"></a>4.1.5 定时任务编写注意事项</h4><ol>
<li>编写定时任务时，写好注释信息</li>
<li>当执行定时任务有多步操作时，最好编写为脚本文件执行定时任务</li>
<li>定时任务中的命令信息最好使用绝对路径执行<ol>
<li>执行操作命令原理<ol>
<li>判断某个命令是否是别名</li>
<li>是则读取别名对应的命令信息；否则继续判断环境变量路径中是否有命令文件</li>
<li>PATH找到则执行命令，没找到则命令无法找到</li>
</ol>
</li>
<li>定时任务中执行 <code>$PATH = /usr/bin/:bin</code></li>
</ol>
</li>
<li>将命令产生的输出信息最好追加到空或者取消默认输出<ol>
<li><code>/var/spool/mail/</code>：系统输出的一些信息(接收定时任务中命令输出信息)会保存到该目录下对应用户的文件中</li>
<li>该目录下文件会不断变大，解决方案有二：<ol>
<li>关闭该服务：<code>systemctl stop postfix.service</code>，会将输出信息放到别的文件中(<code>/var/spool/postfix/maildrop/</code>此目录下会生成大量的小文件 → inode 不足)</li>
<li><code>&gt; /dev/null</code>：追加到空(黑洞，该文件是字符流文件)<ol>
<li><code>echo 12345 1&gt; /dev/null 2&gt; dev/null</code>：同时将错误和正确信息输出到一个文件中</li>
<li><code>echo 12345 &amp;&gt; /dev/null</code>，同上</li>
<li><code>echo 12345 &gt; /dev/null 2&gt;&amp;1 </code>，同上</li>
<li><code>1&gt; 或者 &gt;</code>：标准输出重定向符号，将命令执行后的正确信息输出到指定文件中</li>
<li><code>2&gt;</code>：错误输出重定向符号，将命令执行后的错误信息输出到指定文件中(例如命令写错等)</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>尽量不要出现特殊符号</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2020/12/12/01-linux-%E9%A2%84%E7%A7%91%E4%B9%8B%E7%A1%AC%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="第一章-硬件基础"><a href="#第一章-硬件基础" class="headerlink" title="第一章 硬件基础"></a>第一章 硬件基础</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><ol>
<li>联系方式：330882721</li>
<li>邮箱：<a href="mailto:&#51;&#x33;&#x30;&#56;&#56;&#x32;&#55;&#x32;&#49;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#51;&#x33;&#x30;&#56;&#56;&#x32;&#55;&#x32;&#49;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a></li>
</ol>
<h3 id="1-2-服务器初识"><a href="#1-2-服务器初识" class="headerlink" title="1.2 服务器初识"></a>1.2 服务器初识</h3><h4 id="1-2-1-服务器的分类与采购"><a href="#1-2-1-服务器的分类与采购" class="headerlink" title="1.2.1 服务器的分类与采购"></a>1.2.1 服务器的分类与采购</h4><ol>
<li><p>初创公司/外包公司：服务器设备的采购与选型</p>
</li>
<li><p>服务器设备的种类</p>
</li>
</ol>
<ul>
<li><ul>
<li>方式一：物理主机</li>
<li>方式二：虚拟主机/云主机</li>
</ul>
</li>
</ul>
<ol start="3">
<li>服务器设备的配置</li>
</ol>
<ul>
<li><ul>
<li>服务器硬件配置组成：CPU、内存、磁盘、显卡（集成显卡）、主板、电源、风扇、raid卡</li>
<li>服务器硬件详细介绍</li>
</ul>
</li>
</ul>
<h4 id="1-2-2-物理主机"><a href="#1-2-2-物理主机" class="headerlink" title="1.2.2 物理主机"></a>1.2.2 物理主机</h4><ul>
<li><p>品牌：主推 Dell（戴尔）、接下来是联想、其次是 HP（惠普）、华为 …</p>
</li>
<li><p>种类：</p>
</li>
<li><ul>
<li>机架式服务器：外观类似于抽屉，可以插入到机柜里</li>
<li>塔式服务器：外观类似于台式电脑的主机</li>
<li>刀片式/模块化服务器：模块化服务器将存储、计算、网络、管理等系统模块化、分别独立分开，并通过一个独立的管理模块采用共享的方式运行，让扩展更加灵活和方便</li>
<li>没有特殊需求时主推机架式服务器</li>
<li>高性能运算需求下，预算有限时可以使用刀片式服务器代替</li>
</ul>
</li>
<li><p>型号：单路、双路、四路（路数 == 服务器中CPU的个数）</p>
</li>
<li><ul>
<li>单路服务器：有一颗 CPU，型号有 R240、R340 …</li>
<li>双路服务器：有两颗 CPU，型号有 R440、R640、R740 …</li>
<li>四路服务器：有四颗 CPU，型号有 R840、R940 …</li>
</ul>
</li>
</ul>
<h4 id="1-2-3-云主机：主推阿里云"><a href="#1-2-3-云主机：主推阿里云" class="headerlink" title="1.2.3 云主机：主推阿里云"></a>1.2.3 云主机：主推阿里云</h4><ul>
<li>云主机的价格一般一年控制在 3000~4000 之内</li>
<li>没有特殊需求时，一般选择通用型即可</li>
</ul>
<h3 id="1-3-服务器硬件"><a href="#1-3-服务器硬件" class="headerlink" title="1.3 服务器硬件"></a>1.3 服务器硬件</h3><h4 id="1-3-1-基本硬件介绍"><a href="#1-3-1-基本硬件介绍" class="headerlink" title="1.3.1 基本硬件介绍"></a>1.3.1 基本硬件介绍</h4><ol>
<li>CPU：用于计算和控制操作，可以比作服务器的大脑</li>
</ol>
<ul>
<li><ul>
<li>主频：处理计算的效率</li>
<li>核心：并行处理任务的能力，可以理解为一个工厂里工人的数量</li>
</ul>
</li>
</ul>
<ol start="2">
<li>内存：用于数据信息的存储，存储效率远远高于磁盘，缺点是临时存储，断电后内存中的数据会消失</li>
</ol>
<ul>
<li><ul>
<li>内存可用空间：内存越大意味着可以部署安装更多的服务程序</li>
<li>缓存（Cache）：读数据时，将磁盘中一些频繁访问的数据放到内存中，将其存储到内存的缓存区域中</li>
<li>缓冲（Buffer）：写数据时，直接写入磁盘的效率过低，数据量过大时可能出现超时、报错等问题，可以先将待写入的数据存储到内存的缓冲区域中</li>
</ul>
</li>
</ul>
<ol start="3">
<li>磁盘：也用于数据信息的存储，但是存储效率较低，优点是可以永久存储数据</li>
</ol>
<ul>
<li><ul>
<li><p>接口：IDE &lt; SATA &lt; SCSI &lt; SAS（速度），接口图示</p>
</li>
<li><p>转速：5400rpm &lt; 7200 &lt; 10000 &lt; 15000，理解为圆形餐桌（菜为数据），转的越快，等待时间越少</p>
</li>
<li><p>容量：1字节（Byte）&lt; 1kB（1024B） &lt; 1MB（1024kB）&lt; 1GB（1024MB）&lt; 1TB（1024GB） &lt; 1PB（1024TB）</p>
</li>
<li><p>换算单位：</p>
</li>
<li><ul>
<li>系统识别容量换算：1024</li>
<li>工业识别容量换算：1000</li>
<li>1TB的实际使用容量 = 1 x 1000 x 1000 x 1000 x 1000 / 1024 / 1024 / 1024 GB = 931GB</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li>电源：给服务器供电</li>
</ol>
<ul>
<li><ul>
<li>功率：根据所有硬件所需的功率选择电源</li>
<li>冗余能力：UPS（不间断持续供电系统）、多路电源、发电机</li>
</ul>
</li>
</ul>
<ol start="5">
<li>raid卡：</li>
</ol>
<ul>
<li><ul>
<li>可以存储更大容量的数据，将多块硬盘整合为一块（20TB的数据存储到多块4TB的硬盘中）</li>
<li>提升数据存储的效率（100GB的数据存储到5块1TB整合的5T硬盘中，每个1T磁盘同时存储20GB的数据，速度快了5倍）</li>
<li>提升数据存储的安全性（100GB的数据存储到5块1TB整合的1T硬盘中，此时这100GB会同时存储到5个硬盘里，相当于镜像，提升了安全性）</li>
</ul>
</li>
</ul>
<ol start="6">
<li>名词解释</li>
</ol>
<ul>
<li><ul>
<li>进程：运行起来的程序，也可以理解为 CPU 处理的任务</li>
<li>守护进程</li>
</ul>
</li>
</ul>
<h4 id="1-3-2-企业级数据存储方案（基本都是读多写少）"><a href="#1-3-2-企业级数据存储方案（基本都是读多写少）" class="headerlink" title="1.3.2 企业级数据存储方案（基本都是读多写少）"></a>1.3.2 企业级数据存储方案（基本都是读多写少）</h4><ul>
<li><p>高并发企业存储数据方案：</p>
</li>
<li><ul>
<li><p>读取数据时：</p>
</li>
<li><ul>
<li>客户端（用户）→ 网站服务器（数据） → 内存（缓存区域）← 磁盘（数据）</li>
<li>客户端（用户）访问网站服务器数据，数据存储在磁盘中，速度过慢；可以先将磁盘中频繁访问的数据放到内存中（缓存区域），让服务器访问内存中的数据，如果有则无需去磁盘读取，提高了读取速度</li>
</ul>
</li>
<li><p>存储数据时：</p>
</li>
<li><ul>
<li>客户端（用户）→ 网站服务器（数据） → 内存（缓冲区域）→ 磁盘（数据）</li>
<li>将要写入的数据放到内存中（缓冲区域），之后再慢慢写入到磁盘中</li>
</ul>
</li>
</ul>
</li>
<li><p>中小企业数据存储方案：</p>
</li>
<li><ul>
<li>客户端（用户）→ 网站服务器（数据） → 内存（缓存区域）← 磁盘（数据）</li>
<li>客户端（用户）→ 网站服务器（数据） →  磁盘（数据），提高安全性（放入到内存中会出现丢失风险，比如断电等。对于中小企业来说，写的数据更少，综合考虑以安全性为主）</li>
</ul>
</li>
</ul>
<h2 id="第二章-磁盘管理"><a href="#第二章-磁盘管理" class="headerlink" title="第二章 磁盘管理"></a>第二章 磁盘管理</h2><h3 id="2-1-磁盘知识体系结构"><a href="#2-1-磁盘知识体系结构" class="headerlink" title="2.1 磁盘知识体系结构"></a>2.1 磁盘知识体系结构</h3><h4 id="2-1-1-第一个层次"><a href="#2-1-1-第一个层次" class="headerlink" title="2.1.1 第一个层次"></a>2.1.1 第一个层次</h4><ul>
<li>包括磁盘相关物理知识、内部结构、外部结构、读写数据原理</li>
</ul>
<h4 id="2-1-2-第二个层次"><a href="#2-1-2-第二个层次" class="headerlink" title="2.1.2 第二个层次"></a>2.1.2 第二个层次</h4><ul>
<li>磁盘阵列知识、磁盘弹性拓展知识</li>
</ul>
<h4 id="2-1-3-第三个层次"><a href="#2-1-3-第三个层次" class="headerlink" title="2.1.3 第三个层次"></a>2.1.3 第三个层次</h4><ul>
<li>磁盘分区表的概念、分区命令的使用 fdisk、parted</li>
</ul>
<h4 id="2-1-4-第四个层次"><a href="#2-1-4-第四个层次" class="headerlink" title="2.1.4 第四个层次"></a>2.1.4 第四个层次</h4><ul>
<li>格式化、文件系统</li>
</ul>
<h4 id="2-1-5-第五个层次"><a href="#2-1-5-第五个层次" class="headerlink" title="2.1.5 第五个层次"></a>2.1.5 第五个层次</h4><ul>
<li>磁盘管理相关知识、挂载</li>
</ul>
<h3 id="2-2-磁盘内部和外部结构"><a href="#2-2-磁盘内部和外部结构" class="headerlink" title="2.2 磁盘内部和外部结构"></a>2.2 磁盘内部和外部结构</h3><h4 id="2-2-1-磁盘外部结构"><a href="#2-2-1-磁盘外部结构" class="headerlink" title="2.2.1 磁盘外部结构"></a>2.2.1 磁盘外部结构</h4><ol>
<li>外部结构，即我们可以直接看得到的部分，主要包括了<code>接口类型、转速、盘片、磁头、主轴、容量</code>。</li>
<li>接口类型：<code>SATA、SCSI、SAS</code>，SAS 最优，SATA 最次。</li>
<li>转速：常规的转速有<code>5400rpm、7200rpm、10000rpm、15000rpm</code>，每分钟多少转。</li>
<li>盘片：用于存储数据，黑盘的盘片数量会多些，盘片的数量也会影响存取效率。</li>
<li>磁头：用于读写数据，做径向运动，与盘片的数量是相等的。</li>
<li>主轴：决定了磁盘的转速。</li>
<li>容量：生产换算使用1000，科学换算使用1024。</li>
</ol>
<h4 id="2-2-2-磁盘内部结构"><a href="#2-2-2-磁盘内部结构" class="headerlink" title="2.2.2 磁盘内部结构"></a>2.2.2 磁盘内部结构</h4><ol>
<li>磁盘磁道：磁道用于存储数据，且<code>每个磁道存储的数据大小是一致的</code>。</li>
<li>磁盘扇区：将磁道切分为多个部分，存储数据的<code>最小空间单位</code>称为扇区。可以根据扇区进行分区，一个扇区默认为 512 字节大小。</li>
<li>磁盘柱面：磁盘有多个磁头时，是按照柱面进行读写数据的。</li>
<li>数据读写的原理：按照柱面进行读写。</li>
<li>拓展：机械盘进行<code>碎片整理</code>就是依据机械硬盘工作原理对硬盘读写数据进行性能优化(将同一个数据的不同block整理到一个磁道上从而提升读写效率)，对固态盘不能做碎片整理，可能会引起不可预测的错误。</li>
</ol>
<h3 id="2-3-磁盘阵列配置方法-raid"><a href="#2-3-磁盘阵列配置方法-raid" class="headerlink" title="2.3 磁盘阵列配置方法 - raid"></a>2.3 磁盘阵列配置方法 - raid</h3><ol>
<li>配置阵列级别：常见的有<code>RAID0、RAID1、RAID5、RAID10</code>。</li>
<li>RAID的作用：<ol>
<li>对磁盘进行扩容以便存储更大容量的数据</li>
<li>提高数据存储效率</li>
<li>提升数据存储的安全性</li>
</ol>
</li>
<li>RAID0：可以提高数据存储效率，一般应用在游戏赛事(WCG，世界电子竞技大赛)等存储效率要求高的地方。缺点是无法保证数据安全性，一块坏整个坏。</li>
<li>RAID1：可以提高数据安全性，在存储数据时会同时将数据分别存储到多个磁盘中(备份)。一般应用在存储阵列中，缺点是浪费磁盘容量(浪费50%)且无法提升性能。</li>
<li>RAID5：可以提升存储效率，且保证了数据安全性。浪费的磁盘容量比 RAID1 少，仅损失一块盘。</li>
<li>RAID10：可以提升存储效率，且保证了数据安全性。相比于 RAID5 磁盘空间浪费的更多。</li>
<li>磁盘阵列配置(见网络博客…)</li>
</ol>
<h3 id="2-4-磁盘分区"><a href="#2-4-磁盘分区" class="headerlink" title="2.4 磁盘分区"></a>2.4 磁盘分区</h3><ol>
<li><p>磁盘分区的方案</p>
<ul>
<li><code>/boot</code>分区：200M 左右即可</li>
<li><code>swap</code> 分区：1~8G，内存的 1.5 倍</li>
<li><code>/</code>分区：剩余空间；或者分配50~200G用于存放系统数据/服务程序数据</li>
<li><code>/data</code>分区：剩余空间，存储服务产生的业务数据信息</li>
</ul>
</li>
<li><p>磁盘分区表DPT：</p>
<ul>
<li>占用64字节，每16字节表示一个分区信息(主分区)，即一个系统最多有4个主分区。</li>
<li>可以取出其中16个字节进行扩展分区设置，扩展分区只能有一个，扩展分区可以划分更多的逻辑分区。</li>
<li>主分区可以直接使用；扩展分区不能直接使用。</li>
</ul>
</li>
<li><p>磁盘分区方法</p>
<ol>
<li><p><code>fdisk</code></p>
<ul>
<li>缺陷：CentOS6 中不能划分 2T 容量以上的分区，在 CentOS7 中可以划分 2T 以上分区</li>
<li><code>fdisk /dev/sdb</code>：指定进行分区的设备文件</li>
<li><code>m</code>：获取帮助</li>
<li><code>c</code>：设置分区模式 → dos 模式(划分&lt;2T的分区)</li>
<li><code>g</code>：设置分区模式 → gpt 模式(划分&gt;=2T的分区)</li>
<li><code>d</code>：删除已经分好的区</li>
<li><code>l</code>：列表显示可用的分区类型</li>
<li><code>n</code>：添加一个新的分区</li>
<li><code>o</code>：创建一个新的 dos 分区表</li>
<li><code>p</code> 输出已经分区的信息</li>
<li><code>q</code>：退出分区操作且不做保存</li>
<li><code>t</code>：修改分区类型</li>
<li><code>w</code>：保存对分区的改动</li>
</ul>
</li>
<li><p><code>parted</code></p>
<ul>
<li><p><code>help</code>：帮助</p>
</li>
<li><p><code>mklabel</code>：指定分区格式，可以使用 <code>msdos 或者 gpt</code>，默认是 <code>msdos</code></p>
</li>
<li><p><code>mkpart</code>：创建新分区</p>
</li>
<li><p><code>print</code>：显示分区表信息</p>
</li>
<li><p><code>rm</code>：删除指定分区</p>
</li>
<li><p><code>quit</code>：退出</p>
</li>
</ul>
</li>
<li><p>实践</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">parted /dev/sdb <span class="comment"># 对 /dev/sdb 进行分区操作</span></span><br><span class="line"><span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">mklabel gpt <span class="comment"># 指定分区格式为 gpt</span></span><br><span class="line">mkpart primary 0 2500G <span class="comment"># primary 表示主分区(都写主分区即可，不必使用扩展分区)</span></span><br><span class="line"><span class="built_in">print</span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="4">
<li><p>拓展：CentOS7 开机过程：</p>
<ul>
<li>按下服务器电源 </li>
<li>开机自检(BIOS)，用于检查硬件</li>
<li> MBR 引导(主引导记录；446字节；0头0道1扇区) </li>
<li>GRUB 菜单(选择不同的内核)</li>
<li>加载内核(kernel)</li>
<li>运行 systemd 进程(Linux 系统里面第一个进程) </li>
<li>根据 target 模式选择启动模式(加载 /etc/systemd/system/default.target 文件，该文件是 /usr/lib/systemd/system/graphical.target的软链接)</li>
<li>系统初始化脚本(/usr/lib/systemd/system/sysinit.target) </li>
<li>定义开机启动服务(/usrs/lib/systemd/system/)</li>
<li>启动 mingetty 进程(登录界面)</li>
</ul>
</li>
</ol>
<h3 id="2-5-磁盘弹性扩容-缩容配置-LVM"><a href="#2-5-磁盘弹性扩容-缩容配置-LVM" class="headerlink" title="2.5 磁盘弹性扩容/缩容配置 - LVM"></a>2.5 磁盘弹性扩容/缩容配置 - LVM</h3><ol>
<li><p>应用场景：数据库数据存储操作。</p>
</li>
<li><p>LVM概念原理介绍：</p>
<ul>
<li><p>LVM 是 Logical Volume Manager（逻辑卷管理）的简写，它是 Linux 环境下对磁盘分区进行管理的一种机制。</p>
</li>
<li><p>LVM 可以动态调整磁盘容量，从而提高磁盘管理的灵活性。</p>
</li>
<li><p>工作原理：通过将底层的物理硬盘抽象的封装起来，然后以逻辑卷的方式呈现给上层应用。</p>
</li>
<li><p>优点：</p>
<ul>
<li>可以在系统运行的状态下动态的扩展文件系统的大小。</li>
<li>文件系统可以跨多个磁盘，因此文件系统大小不会受物理磁盘的限制。</li>
<li>可以增加新的磁盘到 LVM 的存储池中。</li>
<li>可以以镜像的方式冗余重要的数据到多个物理磁盘。</li>
<li>可以方便的导出整个卷组到另外一台机器。</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>在从卷组中移除一个磁盘的时候必须使用 vgreduce 命令（这个命令要求 root 权限，并且不允许在快照卷组中使用）。</li>
<li>当卷组中的一个磁盘损坏时，整个卷组都会受到影响。</li>
<li>因为加入了额外的操作，存储性能受到影响。</li>
</ul>
</li>
</ul>
</li>
<li><p>几个名词</p>
<img src="imgs/image-20201201150314239.png" alt="image-20201201150314239" style="zoom: 80%;" />

<img src="imgs/image-20201201150251401.png" alt="image-20201201150251401" style="zoom:80%;" />

<ul>
<li>PE(Physical Extend)：<code>物理区域</code>。<code>PV 中可以用于分配的最小存储单元</code>，可以在创建 PV 的时候制定（默认为 4MB），组成同一 VG 中所有 PV 的 PE 大小应该相同。</li>
<li>PV(Physical Volume)：<code>物理卷</code>。处于 LVM 最底层，可以是物理硬盘或者分区，整个硬盘，或使用 fdisk 等工具建立的普通分区，包括许多默认 4MB 大小的 PE（Physical Extent，基本单元）。当多个物理卷组合成一个卷组后时，LVM会在所有的物理卷上做类似格式化的工作，将每个物理卷切成一块一块的空间，这一块一块的空间就称为PE（Physical Extent ）。</li>
<li>VG(Volume Group)：<code>卷组</code>。建立在 PV 之上，可以含有一个到多个 PV，<code>一个或多个物理卷组合而成的整体</code>。</li>
<li>LV(Logical Volume)：<code>逻辑卷</code>。建立在 VG 之上，相当于原来分区的概念，不过大小可以动态改变。从卷组中分割出的一块空间，<code>用于建立文件系统</code>。</li>
</ul>
</li>
<li><p>LVM 逻辑卷操作命令</p>
<img src="imgs/image-20201201150426441.png" alt="image-20201201150426441" style="zoom:80%;" />
</li>
<li><p>LVM 配置实现过程</p>
<ol>
<li><p>步骤概述：磁盘 → 转换为物理卷PV → 创建卷组VG → 创建逻辑卷LV → 格式化 → 挂载使用</p>
</li>
<li><p>实践</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境准备：新添加了一块空的磁盘 sdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：磁盘创建分区</span></span><br><span class="line">fdisk /dev/sdb</span><br><span class="line">... <span class="comment"># 使用到的命令有 n 、p 、w</span></span><br><span class="line">ll /dev/sdb* <span class="comment"># 查看是否成功分区成功</span></span><br><span class="line">输出：</span><br><span class="line">brw-rw---- 1 root disk 8, 16 Dec  1 15:13 /dev/sdb</span><br><span class="line">brw-rw---- 1 root disk 8, 17 Dec  1 15:13 /dev/sdb1</span><br><span class="line">brw-rw---- 1 root disk 8, 18 Dec  1 15:13 /dev/sdb2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：创建物理卷 PV</span></span><br><span class="line">pvcreate /dev/sdb1 /dev/sdb2  <span class="comment"># 创建两个 PV</span></span><br><span class="line"><span class="comment"># 创建完后我们可以用 pvs 查看或者 pvdisplay 查看详细信息</span></span><br><span class="line">pvs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：创建卷组 VG</span></span><br><span class="line">vgcreate vg1 /dev/sdb1 /dev/sdb2  <span class="comment"># 创建一个 VG 组，并将创建的两个 PV 加入 VG 组</span></span><br><span class="line"><span class="comment"># 可以用-s 参数来修改 PE 大小，不过这只能在创建卷组时使用，一旦卷组创建成功无法再去修改 PE 大小</span></span><br><span class="line"><span class="comment"># 创建完后我们可以用 vgs 查看或者 vgdisplay 查看详细信息</span></span><br><span class="line">vgs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步：创建逻辑卷 LV</span></span><br><span class="line">lvcreate -L 200M -n lv1 vg1</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># -L 参数后跟的是你要设定的逻辑卷大小，这个大小必须是是你设定的 PE 值的整数倍，如果不是它会给你分一个比你设定的大一点的空间，也就是向上取整数倍空间。弊端就是有可能用不完 vg 里面的空间</span></span><br><span class="line"><span class="comment"># -l 参数后面跟的就是 PE 数量，像上个步骤中我们划分的卷组 PE 值为 4MiB，数量为 248，也可以使用-l 跟数量,那划分的逻辑卷大小就为 4*划分的数量。弊端是需要计算，但是不会出现用不完 vg 的空间的情况。</span></span><br><span class="line"><span class="comment"># -n 参数后跟逻辑卷名字，是对创建的逻辑卷命名，最后跟的是卷组名。</span></span><br><span class="line"><span class="comment"># 创建完后我们可以用 lvs 查看或者 lvdisplay 查看详细信息</span></span><br><span class="line">lvs</span><br><span class="line"></span><br><span class="line">第五步：设置挂载点目录</span><br><span class="line">mkfs.ext4 /dev/vg1/lv1 <span class="comment"># 创建文件系统，即格式化操作</span></span><br><span class="line">mount /dev/vg1/lv1 /mnt <span class="comment"># 挂载</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>LVM 逻辑卷扩容操作</p>
<ul>
<li><p>扩容的要求：保证 VG 中有足够的空闲空间</p>
</li>
<li><p>实战</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vgs <span class="comment"># 查看逻辑卷剩余空间</span></span><br><span class="line">lvextend -L +100M /dev/vg1/lv1 <span class="comment"># 对 /dev/vg1/lv1 扩容100M ，+100M表示扩容100M，100M表示扩容到100M</span></span><br><span class="line"><span class="comment"># lvextend 可以加上 -r 参数使挂载的文件系统自动识别扩容的空间，不用命令加载识别</span></span><br><span class="line">lvscan</span><br><span class="line">lvs</span><br><span class="line"><span class="comment"># 注意此时文件系统并没有增大，需要执行命令让文件系统识别已经扩容的空间(此处没有加 -r 参数)</span></span><br><span class="line">resize2fs -f /dev/mapper/vg1-lv1 <span class="comment"># ext4 可以使用，如果使用 xfs 文件系统此处会报错</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>LVM 逻辑卷组扩容</p>
<ul>
<li><p>扩容环境：添加一块磁盘 sdc 用于对卷组进行扩容，添加新的 PV</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;- - -&quot;</span> &gt; /sys/class/scsi_host/host0/scan <span class="comment"># 虚拟机中添加新磁盘后无需重启识别硬盘</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实践</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdc <span class="comment"># 将添加好的硬盘格式化为 PV</span></span><br><span class="line">vgextend vg1 /dev/sdc <span class="comment"># 将新的 PV 添加到指定的卷组中</span></span><br><span class="line">vgs</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="2-6-磁盘格式化-创建文件系统"><a href="#2-6-磁盘格式化-创建文件系统" class="headerlink" title="2.6 磁盘格式化 - 创建文件系统"></a>2.6 磁盘格式化 - 创建文件系统</h3><ol>
<li>Linux中常见的文件系统<ul>
<li>ext3<ul>
<li>最多只能支持32TB的文件系统和2TB的文件，实际只能容纳2TB的文件系统和16GB的文件</li>
<li>Ext3目前只支持32000个子目录</li>
<li>Ext3文件系统使用32位空间记录块数量和inode节点数量</li>
<li>当数据写入到Ext3文件系统中时，Ext3的数据块分配器每次只能分配一个4KB的块</li>
</ul>
</li>
<li>ext4<ul>
<li>EXT4是Linux系统下的日志文件系统，是EXT3文件系统的后继版本。</li>
<li>Ext4的文件系统容量达到1EB，而文件容量则达到16TB</li>
<li>理论上支持无限数量的子目录</li>
<li>Ext4文件系统使用64位空间记录块数量和inode节点数量</li>
</ul>
</li>
<li>xfs<ul>
<li>根据所记录的日志在很短的时间内迅速恢复磁盘文件内容</li>
<li>采用优化算法，日志记录对整体文件操作影响非常小</li>
<li>是一个全64-bit的文件系统，它可以支持上百万T字节的存储空间</li>
<li>能以接近裸设备I/O的性能存储数据</li>
<li>格式化效率高于其他文件系统</li>
</ul>
</li>
</ul>
</li>
<li>格式化操作：<code>mkfs -t xfs /dec/sdb1</code> → <code>-t</code>参数用于指定文件系统类型<ul>
<li>可以使用 <code>mkfs. + Tab</code> 键查看可用的文件系统</li>
<li>对于已有文件或者已经格式化过的文件系统，可以加上 <code>-f</code> 参数强制格式化</li>
</ul>
</li>
</ol>
<h3 id="2-7-磁盘挂载"><a href="#2-7-磁盘挂载" class="headerlink" title="2.7 磁盘挂载"></a>2.7 磁盘挂载</h3><ol>
<li><p>mount 的用法拓展</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -o </span><br></pre></td></tr></table></figure>
</li>
<li><p>默认挂载参数信息</p>
<ul>
<li><code>rw</code>：默认；挂载之后的分区具有读写权限</li>
<li><code>ro</code>：挂载之后的分区只具有读权限</li>
<li><code>suid</code>：可以让具有setuid权限文件生效</li>
<li><code>nosuid</code>：可以让具有setuid权限文件失效</li>
<li><code>dev</code>：</li>
<li><code>nodev</code>：</li>
<li><code>exec</code>：默认；可以让具有执行权限的文件生效</li>
<li><code>noexec</code>：可以让具有执行权限的文件失效</li>
<li><code>auto</code>：允许挂载配置信息进行自动挂载，用法 → 在 <code>/etc/fstab</code> 中配置使用</li>
<li><code>noauto</code>：禁止挂载配置信息进行自动挂载，用法 → 在 <code>/etc/fstab</code> 中配置使用</li>
<li><code>nouser</code>：默认；禁止普通用户进行挂载操作，用法 → 在 <code>/etc/fstab</code> 中配置使用</li>
<li><code>user</code>：允许普通用户进行挂载操作，用法 → 在 <code>/etc/fstab</code> 中配置使用，使用 <code>mount /mnt</code></li>
<li><code>async</code>：默认；异步方式存储数据(写数据时先放到内存缓冲区，最后写到磁盘中，不安全可能会出现数据丢失)</li>
<li><code>sync</code>：同步方式存储数据(安全性高)</li>
</ul>
</li>
<li><p>当挂载点目录无法卸载时，可以进行强制卸载：<code>umount -lf /mnt</code> → <code>-l</code> 表示 lazy ；<code>-f</code> 表示强制</p>
</li>
<li><p>一个挂载点无法卸载的原因：</p>
<ul>
<li>此时正在挂载目录中</li>
<li>有其他用户或者进程正在使用该目录中的数据</li>
</ul>
</li>
<li><p><code>mount -a</code>：重新读取<code>/etc/fstab</code>文件进行挂载</p>
</li>
</ol>
<h3 id="2-7-磁盘交换分区如何扩容"><a href="#2-7-磁盘交换分区如何扩容" class="headerlink" title="2.7 磁盘交换分区如何扩容"></a>2.7 磁盘交换分区如何扩容</h3><ol>
<li><p>内存存储的一些数据信息和服务进程有关</p>
</li>
<li><p><code>free -h</code>：查看交换分区的情况</p>
</li>
<li><p>交换分区临时扩容：<img src="imgs/image-20201201145236780.png" alt="image-20201201145236780" style="zoom: 50%;" /></p>
<ul>
<li><p>创建系统交换分区使用文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/tmp/1G bs=100M count=10</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置文件被交换分区所使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkswap /tmp/1G</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件划分到交换分区使之生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">swapon /tmp/1G  <span class="comment"># 加载</span></span><br><span class="line">swapoff /tmp/1G <span class="comment"># 卸载</span></span><br></pre></td></tr></table></figure>





</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/12/12/03-linux-Linux%20%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h2 id="第三章-Linux-系统介绍与环境搭建准备"><a href="#第三章-Linux-系统介绍与环境搭建准备" class="headerlink" title="第三章 Linux 系统介绍与环境搭建准备"></a>第三章 Linux 系统介绍与环境搭建准备</h2><blockquote>
<p><strong>核心知识速记：</strong></p>
<ol>
<li>操作系统：是处于用户与计算机系统硬件之间用于传递信息的系统程序软件。</li>
<li>操作系统组成：内核(控制管理硬件) + shell(命令解释器) + 扩展软件。</li>
<li>Linux 初识：开源的类 Unix 操作系统，支持多用户、多任务、多线程和多 CPU …</li>
<li>Linux 发行版本：Ubuntu(Linux 桌面系统领域)、Redhat(Linux 服务器系统领域)、CentOS、Debian(Linux 系统安全要求比较高的领域)、Kali(网络安全领域) …</li>
<li>VMware 网络模式<ol>
<li>仅主机模式：不能访问外网；容易出现地址冲突。</li>
<li>桥接模式：可以访问外网；可以实现局域网物理主机与虚拟主机的相互访问(保证宿主机(Windows)和虚拟系统(Linux)网络配置的网段信息保持一致)。</li>
<li>NAT 模式：可以访问外网；避免了出现地址冲突，但无法实现物理和虚拟主机之间的互联。</li>
</ol>
</li>
<li>修改网卡名称代码：<code>net.ifnames=0 biosdevname=0</code></li>
<li>Linux 分区<ol>
<li>启动分区 <code>/boot</code> ：200MB 即可；</li>
<li>交换分区 <code>swap</code> ：可以临时将磁盘空间交换给内存使用；大小 = 内存 x 1.5 且 &lt;= 8G；</li>
<li>根分区 <code>/</code> ：存储数据，大小为剩余的所有空间。</li>
</ol>
</li>
<li>命令提⽰符：<code>[root@bj-aliyun-data ~]#</code> → <code>[用户名@主机名 当前目录]用户权限</code></li>
<li><code>10.0.0.0/24</code>的含义：<code>/24</code> 代表⼦⽹掩码(前 24 位置为 1)，即 <code>255.255.255.0</code>。</li>
<li>远程连接 Linux 配置：检查 Linux 网络配置 → Linux 远程服务是否开启 → 客户主机安装 Xshell(远程连接软件) → Xshell 配置 → 建立会话 → 成功连接</li>
<li>系统操作经验总结</li>
<li>系统特殊符号</li>
<li>使用 echo 简单实现 Linux 系统的多用户通讯<ol>
<li>查看所有用户进程：<code>ps -ef</code></li>
<li>关注 <code>sshd:linus@pts/0 、sshd:root@pts/1</code></li>
<li>发送消息：<code>echo &quot;hello&quot; &gt; /dev/pts/0</code></li>
</ol>
</li>
<li>⽹络、系统、帮助基础操作命令</li>
<li>⽬录基础操作命令：<code>mkdir</code>、<code>tree</code>、<code>emdir</code>、<code>cd</code>、<code>pwd</code>、<code>ls</code></li>
<li>⽂件基础操作命令：<code>touch</code>、<code>echo</code>、<code>cat</code>、<code>&gt;</code>、<code>less</code>、<code>more</code>、<code>head</code>、<code>tail</code>、<code>cp</code>、<code>mv</code>、<code>rm</code></li>
<li>编辑基础操作命令：、<code>vi</code>、<code>vim</code>、</li>
<li>系统主机名优化<ol>
<li>查看主机名：<code>hostname</code>、<code>hostnamectl</code></li>
<li>临时更改主机名：<code>hostname linus</code></li>
<li>永久更改主机名：<code>hostnamectl set-hostname linus</code></li>
<li>配置主机名解析：<code>/etc/hosts</code> → 新增条目<code>10.0.0.2 linus</code></li>
<li>好处：可以利用主机名访问主机；简化服务配置操作。</li>
<li>不同用户虚拟主机互访：<code>ssh -p9000 192.168.14.124</code></li>
</ol>
</li>
<li>变量<ol>
<li>自定义变量：自行规划、无特殊含义、当前用户生效、无特殊名称规范。</li>
<li>系统环境变量：系统自带、对系统功能有影响、全部用户生效、全部大写。</li>
</ol>
</li>
<li>提示符优化<ol>
<li>临时修改：<code>PS1=[\u@\h \W]\$</code></li>
<li>永久修改：<code>vi /etc/profile</code> → 新增条目<code>PS1=&quot;\[\e[32;1m\][\u@\h \W]\\$ \e[0m\]&quot;</code></li>
</ol>
</li>
<li>下载源优化<ol>
<li>两个仓库：<code>yum仓库</code>、<code>epel仓库</code></li>
<li>两个文件：<code>/etc/yum.repos.d/CentOS-Base.repo</code>、<code>/etc/yum.repos.d/epel.repo</code></li>
<li>两个推荐源：阿里、清华(具体配置方式见官网)</li>
</ol>
</li>
<li>系统时间<ol>
<li>系统时间查看：<code>date</code> → 查看简要时间；<code>timedatectl</code> → 查看详细时间与配置</li>
<li>自动修改<ol>
<li>修改时区：<code>timedatectl list-timezones</code> → <code>/Shanghai</code> → <code>timedatectl set-timezone Asia/Shanghai</code></li>
<li>开启网络时间同步：<code>timedatectl set-ntp 1</code>(1 代表开，0 代表关)</li>
<li>安装时间同步程序：<code>yum -y install chrony</code></li>
<li>启动服务：<code>systemctl start chronyd</code></li>
</ol>
</li>
<li>手动与网络服务器校对修改<ol>
<li><code>yum install -y ntpdate</code></li>
<li><code>ntpdate time.windows.com</code> ：<code>ntpdate ntp时间服务器地址</code></li>
</ol>
</li>
<li>手工调节时间：<code>timedatectl set-time &quot;2020-11-11 15:00:00&quot;</code></li>
</ol>
</li>
<li>字符编码<ol>
<li>临时修改：<code>localectl list-locales</code> → 查看可配置字符编码；<code>LANG=zh_CN.utf8</code> → 设置为 zh_CN.utf8</li>
<li>永久修改：<code>vi /etc/locale.conf</code> → <code>LANG=zh_CN.utf8</code> 即可</li>
<li>永久修改：<code>localectl set-locale LANG=zh_CN.utf8</code></li>
</ol>
</li>
<li>远程连接<ol>
<li><code>cat -n /etc/ssh/sshd_config</code></li>
<li>两处地方：<ol>
<li><code>79 GSSAPIAuthentication yes</code> → <code>GSSAPIAuthentication no</code></li>
<li><code>115 #UseDNS yes</code> → <code>UseDNS no</code></li>
</ol>
</li>
<li>修改命令：<ol>
<li><code>sed -i &#39;79s/yes/no/g&#39; /etc/ssh/sshd_config</code></li>
<li><code>sed -i &#39;115s/#UseDNS yes/UseDNS no/g&#39; /etc/ssh/sshd_config</code></li>
</ol>
</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="3-1-Linux-简介"><a href="#3-1-Linux-简介" class="headerlink" title="3.1 Linux 简介"></a>3.1 Linux 简介</h3><h4 id="3-1-1-操作系统"><a href="#3-1-1-操作系统" class="headerlink" title="3.1.1 操作系统"></a>3.1.1 操作系统</h4><ol>
<li>概念：操作系统，英文名称为 Operating System，简称 OS，是处于用户与计算机系统硬件之间用于传递信息的系统程序软件。简单来说，操作系统在计算机系统(硬件)与使用者之间起到接口的作用。</li>
<li>作用：管理和控制计算机系统中的硬件和软件资源。</li>
<li>组成：内核(控制管理硬件) + shell(命令解释器) + 扩展软件。</li>
</ol>
<h4 id="3-1-2-Linux"><a href="#3-1-2-Linux" class="headerlink" title="3.1.2 Linux"></a>3.1.2 Linux</h4><ol>
<li>概念：Linux 是一套开放源代码程序的，并可以自由传播的类 Unix 操作系统软件(Unix 系统是 Linux 系统的前身)，是一个基于 POSIX 的多用户、多任务并且支持多线程和多 CPU 的操作系统。Linux 操作系统 = Linux 内核 + GNU 软件及系统软件 + 必要的应用程序。<blockquote>
<p>拓展：</p>
<ol>
<li>POSIX 全称为 Portable Operating System Interface，中文翻译为可移植操作系统接口，POSIX 标准定义了操作系统应该为应用程序提供的接口标准。</li>
<li>多用户：Windows 在同一时刻默认不能多用户同时登陆，Linux 可以。</li>
<li>进程与线程</li>
</ol>
</blockquote>
</li>
<li>历史<ol>
<li>历史线：Unix → Minix → GNU → Linux</li>
<li>Unix：UNIX 系统于 1969 年在 AT&amp;T 的贝尔实验室诞生。</li>
<li>Minix：1984 年，Andrew S.Tanenbaum 开发了用于教学的 Unix 系统，命名为 Minix。</li>
<li>GNU：1984 年，Richard Stallman 发起了开发自由软件的运动，并成立了自由软件基金会(Free Software Foundation，FSF)和 GNU 项目。</li>
<li>Linux：1991 年年底，Linus Torvalds 公开了 Linux 内核源码 0.02 版(这里公开的 Linux 内核源码并不是我们现在使用的 Linux 系统的全部，而仅仅是 Linux 内核(kernel)部分的代码)。</li>
<li>Linux 的标志和吉祥物为一只名字叫作 Tux 的企鹅 → Torvalds’Unix<blockquote>
<p>拓展</p>
<ol>
<li>GPL 全称为 General Public License，中文名为通用公共许可，是一个最著名的开源许可协议，开源社区最著名的 Linux 内核就是在 GPL 许可下发布的。GPL 许可是由自由软件基金会创建的。</li>
<li>LGPL(Lesser General Public License)相对于 GPL 较为宽松，允许不公开全部源代码，为基于 Linux 平台开发商业软件提供了更广阔的空间。</li>
<li>IT 服务器领域是 Linux、UNIX、Windows 三分天下。</li>
</ol>
</blockquote>
</li>
</ol>
</li>
<li>Linux 发行版本<ol>
<li>Ubuntu：桌面系统领域；(开发人员常用)</li>
<li>Redhat：应用服务部署收费；</li>
<li>CentOS：应用服务部署免费；(互联网公司常用)</li>
<li>Debian：注重安全性；(游戏、金融公司)</li>
<li>Kali：网络安全领域；</li>
<li>…</li>
</ol>
</li>
<li>下载地址：<a href="http://mirrors.aliyun.com/">www.mirrors.ailiyun.com</a></li>
<li>Linux 运维职责<ol>
<li>保证数据不丢失；</li>
<li>保证网站服务 7x24 小时稳定运行；</li>
<li>提升用户访问网站的体验。</li>
</ol>
</li>
</ol>
<h3 id="3-2-Linux-虚拟环境搭建"><a href="#3-2-Linux-虚拟环境搭建" class="headerlink" title="3.2 Linux 虚拟环境搭建"></a>3.2 Linux 虚拟环境搭建</h3><h4 id="3-2-1-虚拟环境"><a href="#3-2-1-虚拟环境" class="headerlink" title="3.2.1 虚拟环境"></a>3.2.1 虚拟环境</h4><ol>
<li>虚拟环境的作用/优点<ol>
<li>实现多个系统同时存在</li>
<li>提高硬件资源的利用率</li>
<li>节省物理空间</li>
</ol>
</li>
<li>VMware Workstation 网络模式介绍<ol>
<li>Host-only(仅主机)：在 Host-only 模式下，虚拟机的网卡会连接到宿主的 VMnet1 上，但宿主系统并不为虚拟机提供任何路由服务，因此虚拟机只能与宿主机进行通信，不能连接到实际网络上，即无法上网。</li>
<li>Bridged(桥接模式)<ol>
<li>桥接模式可以简单理解为通过物理主机网卡架设一座桥，从而连入实际的网络中。因此，虚拟机可以被分配与物理主机相同网段的独立 IP，所有网络功能和网络中的真实机器几乎完全一样。桥接模式下的虚拟机和网内真实计算机所处的位置是一样的。</li>
<li>Bridged 网络类型特别适合于局域网环境，其优势是虚拟机像一台真正的主机一样，缺点是可能会与其他物理主机 IP 冲突，并且在与宿主机交换数据时，都会经过实际的路由器。</li>
</ol>
</li>
<li>NAT(Network Address Translation，网络地址转换)<ol>
<li>简单地理解，NAT 模式的虚拟机就是通过宿主机(物理计算机)上网和交换数据的。</li>
<li>在 NAT 模式下，虚拟机的网卡连接到宿主机的 VMnet8 上。此时系统的 VMware NAT Service 服务就充当了路由器，负责将虚拟机发送到 VMnet8 的包进行地址转换之后发送到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMware DHCP Service 负责为虚拟机分配 IP 地址。</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="3-2-2-Linux-安装"><a href="#3-2-2-Linux-安装" class="headerlink" title="3.2.2 Linux 安装"></a>3.2.2 Linux 安装</h4><ol>
<li>步骤总览：在 VMware 上创建虚拟机 → 配置 VMware 网络 → 加载 CentOS 系统镜像 → 启动虚拟机，进入安装界面 → 选中 install CentOS ，按 Tab 键修改网卡名称 → 网络配置 → 分区 → 选择预装库 → 设置管理员/用户名及密码 → 重启。</li>
<li>修改网卡名称代码：<code>net.ifnames=0 biosdevname=0</code></li>
<li>分区介绍<ol>
<li>启动分区 <code>/boot</code> ：200MB 即可；</li>
<li>交换分区 <code>swap</code> ：可以临时将磁盘空间交换给内存使用；大小 = 内存 x 1.5 且 &lt;= 8G；</li>
<li>根分区 <code>/</code> ：存储数据，大小为剩余的所有空间。</li>
</ol>
</li>
</ol>
<h3 id="3-3-Linux-系统初识"><a href="#3-3-Linux-系统初识" class="headerlink" title="3.3 Linux 系统初识"></a>3.3 Linux 系统初识</h3><h4 id="3-3-1-基础操作规范"><a href="#3-3-1-基础操作规范" class="headerlink" title="3.3.1 基础操作规范"></a>3.3.1 基础操作规范</h4><ol>
<li>命令提示符：<code>[root@bj-aliyun-data ~]#</code><ul>
<li>root 代表当前登录系统用户名称</li>
<li>bj-aliyun-data 代表当前系统主机名称 BJ-ALIYUN-DATA</li>
<li>~ 表示当前所在的系统目录路径</li>
<li># 代表此时登录的系统用户权限，# 代表管理员权限，$ 代表非管理员权限</li>
</ul>
</li>
<li>命令输入格式规范<ol>
<li>输入格式一:<code>命令 回车</code></li>
<li>输入格式二:<code>命令 [-]参数</code>，有些参数无需加<code>-</code>，例如<code>ip address show</code></li>
<li>输入格式三：<code>命令 [-]参数 对象</code>，例如<code>cat -n /etc/hosts</code></li>
</ol>
</li>
</ol>
<h4 id="3-3-2-基础网络配置"><a href="#3-3-2-基础网络配置" class="headerlink" title="3.3.2 基础网络配置"></a>3.3.2 基础网络配置</h4><ol>
<li>查看网络信息：<code>ip</code><ol>
<li><code>ip address show</code>：查看系统网卡地址信息，可以简写为<code>ip a</code></li>
<li><code>ip address show eth0</code>：查看指定网卡地址信息，可以简写为<code>ip a s eth0</code></li>
</ol>
</li>
<li>修改网卡信息：<code>nmtui</code><ol>
<li><code>10.0.0.0/24</code>：/24 代表子网掩码，24 个 1，即 255.255.255.0，即 C 类地址</li>
<li>DNS：223.5.5.5 是阿里云提供的公共 DNS，百度的是 180.76.76.76</li>
</ol>
</li>
<li>重启网络服务：<code>systemctl restart network</code></li>
</ol>
<h4 id="3-3-3-远程连接配置"><a href="#3-3-3-远程连接配置" class="headerlink" title="3.3.3 远程连接配置"></a>3.3.3 远程连接配置</h4><ol>
<li>配置好操作系统的网络</li>
<li>确认系统中远程服务是否开启：<code>systemctl status sshd</code></li>
<li>客户端主机安装远程连接软件</li>
</ol>
<h4 id="3-3-4-系统命令"><a href="#3-3-4-系统命令" class="headerlink" title="3.3.4 系统命令"></a>3.3.4 系统命令</h4><ol>
<li>内置命令：系统安装之后已经存在的命令。内置命令和 shell 是一体的，它们作为 shell 工具的组成部分存在，不需要通过衍生出子进程来执行，也不需要打开程序文件。</li>
<li>外置命令：安装第三方软件包之后新出现的命令。外部命令也称为文件系统命令，是 bash shell 之外的程序，它并不是 shell 的一部分。外部命令一般位于<code>/bin</code>、<code>/usr/bin</code>、<code>/sbin</code> 或<code>/usr/sbin</code> 中。</li>
<li><code>type pwd</code> → 用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令。<ol>
<li>alias：别名</li>
<li>keyword：关键字，Shell 保留字</li>
<li>function：函数，Shell 函数</li>
<li>builtin：内建命令，Shell 内建命令</li>
<li>file：文件，磁盘文件，外部命令</li>
<li>unfound：没有找到</li>
</ol>
</li>
<li>参数<ol>
<li><code>-t</code>：输出”file”、”alias”或者”builtin”，分别表示给定的指令为”外部指令”、”命令别名”或者”内部指令”；</li>
<li><code>-p</code>：如果给出的指令为外部指令，则显示其绝对路径；</li>
<li><code>-a</code>：在环境变量”PATH”指定的路径中，显示给定指令的信息，包括命令别名。</li>
</ol>
</li>
</ol>
<h4 id="3-3-5-系统操作经验总结"><a href="#3-3-5-系统操作经验总结" class="headerlink" title="3.3.5 系统操作经验总结"></a>3.3.5 系统操作经验总结</h4><ol>
<li>系统中大部分的配置改动之后，需要重启服务</li>
<li>系统对大小写敏感</li>
<li>系统操作命令之后，没有任何消息有可能是最好的消息</li>
<li>系统目录结构顶点就是根目录(一切从根开始)</li>
<li>命令参数的位置不能随意放置</li>
<li>运维人员所有操作或配置过程，都需要检查确认</li>
<li>系统中一切皆文件</li>
<li>局部设置优先于全局设置</li>
<li>软件包和命令名不一定一致</li>
</ol>
<h4 id="3-3-6-系统特殊符号"><a href="#3-3-6-系统特殊符号" class="headerlink" title="3.3.6 系统特殊符号"></a>3.3.6 系统特殊符号</h4><ol>
<li><code>/</code>：① 根目录 ② 目录之间的分隔符</li>
<li><code>..</code>：上一级目录</li>
<li><code>&#123;..&#125;</code>：生成序列信息</li>
<li><code>~</code>：家目录</li>
<li><code>-</code>：两个目录之间的操作</li>
<li><code>*</code>：匹配符号(用在匹配文件名时)</li>
<li><code>.*</code>：用于匹配文件</li>
<li><code>&gt;</code>：标准输出重定向，作用是清空指定文件内容</li>
<li><code>&gt;&gt;</code>：标准追加输出重定向，作用是可以在文件中追加内容</li>
<li><code>&lt;</code>：标准输入重定向</li>
<li><code>&lt;&lt;</code>：标准追加输入重定向</li>
<li><code>^</code>：一行内容的行首定位符</li>
<li><code>$</code>：一行内容的行尾定位符</li>
<li><code>#</code>：在文件中表示注释信息</li>
<li><code>.</code>：文件名前面带点代表是隐藏文件；任意且唯一一个字符(正则)</li>
<li><code>\</code>：转义字符</li>
<li><code>|</code>：管道符，将前一个命令处理的结果交给后面的命令进行识别处理</li>
<li><code>&amp;&amp;</code>：前面的命令成功才会执行后面的命令；与</li>
<li><code>||</code>：前面的命令失败才会执行后面的命令；或</li>
</ol>
<h4 id="3-3-7-快捷方式介绍-内容见-Excel-表格"><a href="#3-3-7-快捷方式介绍-内容见-Excel-表格" class="headerlink" title="3.3.7 快捷方式介绍(内容见 Excel 表格)"></a>3.3.7 快捷方式介绍(内容见 Excel 表格)</h4><h4 id="3-3-8-拓展：Linux-多用户通讯简单实现-echo"><a href="#3-3-8-拓展：Linux-多用户通讯简单实现-echo" class="headerlink" title="3.3.8 拓展：Linux 多用户通讯简单实现(echo)"></a>3.3.8 拓展：Linux 多用户通讯简单实现(echo)</h4><ol>
<li>首先，需要查看系统的所有进程</li>
<li>确认登录系统的用户与系统之间的连接点</li>
<li>使用 echo 命令发送会话(仅管理员权限可以发送消息)</li>
<li>实践<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef     # 查看系统的所有进程，关注 sshd:linus@pts/0 、sshd:root@pts/1</span><br><span class="line">echo &quot;hello&quot; &gt; /dev/pts/0     # 向 linus 发送会话 hello</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-4-Linux-基础命令"><a href="#3-4-Linux-基础命令" class="headerlink" title="3.4 Linux 基础命令"></a>3.4 Linux 基础命令</h3><h4 id="3-4-1-网络、系统、帮助基础操作命令"><a href="#3-4-1-网络、系统、帮助基础操作命令" class="headerlink" title="3.4.1 网络、系统、帮助基础操作命令"></a>3.4.1 网络、系统、帮助基础操作命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=========================================================</span><br><span class="line">nmtui     # 图形化修改网卡信息(尼玛tui)</span><br><span class="line">=========================================================</span><br><span class="line">ip address show     # 查看系统网卡地址信息</span><br><span class="line">ip address show eth0     # 查看指定网卡信息</span><br><span class="line">=========================================================</span><br><span class="line">systemctl start network     # 开启服务</span><br><span class="line">systemctl restart network     # 重启服务</span><br><span class="line">systemctl stop network     # 关闭服务</span><br><span class="line">systemctl status network     # 查看服务状态</span><br><span class="line">=========================================================</span><br><span class="line">network     # 网卡服务</span><br><span class="line">sshd     # 远程服务</span><br><span class="line">=========================================================</span><br><span class="line">shutdown -h     # 延迟关机(halt，停止。默认延迟一分钟)</span><br><span class="line">shutdown -h 10     # 设置延迟10分钟关机</span><br><span class="line">shutdown -h 0     # 立即关机</span><br><span class="line">shutdown -h now     # 立即关机</span><br><span class="line">shutdown -r     # 重启(reboot，默认延迟一分钟)</span><br><span class="line">shutdown -r 10     # 设置延迟10分钟重启</span><br><span class="line">shutdown -r 0     # 立即重启</span><br><span class="line">shutdown -r now     # 立即重启</span><br><span class="line">shutdown -c     # 取消延迟的关机/重启计划</span><br><span class="line">poweroff     # 立即关机</span><br><span class="line">init 0     # 立即关机</span><br><span class="line">reboot     # 立即重启</span><br><span class="line">init 6     # 立即重启</span><br><span class="line">=========================================================</span><br><span class="line">man cat     # 获取cat的帮助信息</span><br><span class="line">cat --help     # 获取cat的帮助信息，可以显示(可简写为cat --h)</span><br><span class="line">help pwd     # 查看内置命令的帮助信息</span><br><span class="line">=========================================================</span><br></pre></td></tr></table></figure>

<h4 id="3-4-2-目录基础操作命令"><a href="#3-4-2-目录基础操作命令" class="headerlink" title="3.4.2 目录基础操作命令"></a>3.4.2 目录基础操作命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=========================================================</span><br><span class="line">mkdir /data     # 创建单个目录：data ，make directories</span><br><span class="line">mkdir /data&#123;01..10&#125;     # 创建多个有序目录：data01、data02、...、data10</span><br><span class="line">mkdir /data&#123;01..10..2&#125;     # 创建多个等差目录：data01、data03、...、data09</span><br><span class="line">mkdir &#123;conf,log&#125;     # 创建多个无序目录：conf、log</span><br><span class="line">mkdir -p /data/linus     # 创建多级目录 -p ：创建已有的目录不报错(不会将之前目录中的文件覆盖)，创建目录时有需要则自动创建父级目录</span><br><span class="line">=========================================================</span><br><span class="line">tree /data     # 以树形结构查看指定目录(不给路径时显示当前目录的树状结构)</span><br><span class="line">=========================================================</span><br><span class="line">rmdir /data     # 移除单个空目录：data(!!!注意，必须是空目录，即该目录下不存在任何文件或目录)</span><br><span class="line">rmdir data&#123;01..10&#125;     # 移除多个有序空目录：data01、data02、...、data10</span><br><span class="line">rmdir /data&#123;01..10..2&#125;     # 移除多个等差空目录：data01、data03、...、data09</span><br><span class="line">=========================================================</span><br><span class="line">cd /data     # 绝对路径切换到系统目录，从根开始</span><br><span class="line">cd data     # 相对路径切换到系统目录，从当前路径开始</span><br><span class="line">cd ../     # 返回上一级目录</span><br><span class="line">cd ../../../     # 返回上级多级目录，超出后系统目录的顶点就是根目录</span><br><span class="line">cd -     # 返回到上一次所在的目录，执行多次后是在两个目录中不断切换</span><br><span class="line">cd ~     # 快速进入到家目录</span><br><span class="line">cd     # 快速进入到家目录</span><br><span class="line">cd ~libin     # 快速进入指定用户的家目录</span><br><span class="line">=========================================================</span><br><span class="line">pwd     # 查看所在目录路径(绝对路径)</span><br><span class="line">=========================================================</span><br><span class="line">ls     # 不指定路径时显示当前目录下的所有数据</span><br><span class="line">ls data     # 列表显示相对路径下目录中的内容</span><br><span class="line">ls /data     # 列表显示绝对路径下目录中的内容</span><br><span class="line">ls linus/zeus.conf     # 查询 linus 下的 zeus.conf 文件是否存在，存在则返回文件名，不存在则显示错误信息No such file or directory</span><br><span class="line">ls linus/hos*     # 模糊查询 linus 下所有以 hos 开头的文件，也可以使用 ls linus/hos + 两次 Tab 键 → 显示 hos 开头的文件</span><br><span class="line">ls -l linus/hosts     # 查询目录中数据的详细信息 -l：查看 linus/hosts 路径下的文件/文件夹详细信息</span><br><span class="line">ll linus/hosts     # 是ls -l 的别名(即 ll ↔ ls -l)</span><br><span class="line">ll -d linus     # 查看目录的详细信息 -d：查看 linus 该目录的详细信息</span><br><span class="line">ll -t linus     # 按时间排序 -t：按照时间排序显示数据详细信息，最新数据显示在最上面</span><br><span class="line">ll -tr linus     # 按时间逆序 -r：按照时间排序显示数据详细信息，最新数据显示在最下面</span><br><span class="line">ll -S linus     # 按大小排序 -S：按照大小显示数据详细信息，最大的显示在最上面</span><br><span class="line">ll -Sr linus     # 按大小逆序 -r：按照大小显示数据详细信息，最大的显示在最下面</span><br><span class="line">ll -h linus     # -h ：表示按照 KB、MB、GB 等显示数据大小详细信息，使用 ls 时需要与 -l 结合使用，简写即 ll -h ，默认不加此参数以字节B显示</span><br><span class="line">ll -a linus     # 查看指定目录的所有文件详细信息(包括隐藏文件) -a ，即 all</span><br><span class="line">=========================================================</span><br></pre></td></tr></table></figure>

<h4 id="3-4-2-文件基础操作命令"><a href="#3-4-2-文件基础操作命令" class="headerlink" title="3.4.2 文件基础操作命令"></a>3.4.2 文件基础操作命令</h4><ol>
<li><p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=========================================================</span><br><span class="line">touch linus/net.conf     # 创建文件：net.conf</span><br><span class="line">=========================================================</span><br><span class="line">echo &quot;abc&quot; &gt; linus/net.conf     # 编辑文件(标准输出重定向，在写入之前，会将文件内容清空)，将 abc 写入到 net.conf 文件中，echo本义是将数据按行显示在屏幕上</span><br><span class="line">echo &quot;abc&quot; &gt;&gt; linus/net.conf     # 编辑文件(标准追加输出重定向，不会清空)</span><br><span class="line">&quot;cat &gt;&gt; linus/net.conf &lt;&lt; EOF&quot;     # 编辑文件(编辑多行一次写入到文件中)，cat 本义是查看文件内容。开始输入，结尾处输入 EOF 退出(EOF是一个标记，可以自定义，但开始标记和结束标记必须相同)</span><br><span class="line">=========================================================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> linus/net.conf     <span class="comment"># 清空文件内容：清空 net.conf 文件的内容</span></span></span><br><span class="line">=========================================================</span><br><span class="line">cat linus/net.conf     # 查看文件内容，一次性查看所有内容，适用于小文件</span><br><span class="line">cat -A linus/net.conf     # 查看文件内容，且显示文件行尾定位符(多用于看行尾是否存在空格)</span><br><span class="line">cat -n linus/net.conf     # 查看文件内容，且显示行号</span><br><span class="line">less linus/net.conf     # 查看文件内容，逐行上下(↑↓、enter向下)或者逐页(空格)查看文件内容，适用于大文件，可以输入 /、n、N、q 等进行查找退出等操作</span><br><span class="line">more linus/net.conf     # 查看文件内容，可以使用 Space 键翻页查看或者使用enter逐行查看，一次性加载完成，比 less 加载速度慢，有进度条显示，只能向下查看</span><br><span class="line">head -1 linus/net.conf     # 查看文件内容，看文件的前几行，不指定时默认查看前10行</span><br><span class="line">tail -10 linus/net.conf     # 查看文件内容，看文件的后几行，不指定时默认查看后10行</span><br><span class="line">=========================================================</span><br><span class="line">cp linus/net.conf /backup     # 复制文件，将 net.conf 备份(复制)到 /backuo 文件夹下(不推荐，可能会出现覆盖操作)</span><br><span class="line">cp linus/net.conf /backup/net.confnew     # 复制文件，将 net.conf 备份(复制)到 /backuo 文件夹且重命名(推荐)</span><br><span class="line">cp -r linus /backup     # 复制文件夹，将目录与其子文件/文件夹全部备份到新文件夹中(不推荐，可能会出现覆盖操作)</span><br><span class="line">cp -r linus /backup/linus-2020-11-11     # 复制文件夹，将目录与其子文件/文件夹全部备份到新文件夹中(推荐)</span><br><span class="line">=========================================================</span><br><span class="line">mv linus/net.conf linusnew     # 移动(剪切)文件，移动文件到指定存在的目录(其后也可以在目标目录中重新指定不存在的新文件名，即移动且重命名)</span><br><span class="line">mv linus /datenew     # 移动(剪切)目录，移动目录到指定存在的目录(其后也可以在目标目录中重新指定不存在的新目录名，即移动且重命名)</span><br><span class="line">mv linus linusnew     # 重命名文件/文件夹，在当前目录下指定不存在的新文件/文件夹名</span><br><span class="line">=========================================================</span><br><span class="line">rm a.txt b.txt     # 删除 a.txt 和 b.txt 文件，需要进行二次确认</span><br><span class="line">rm -f a.txt b.txt     # 删除 a.txt 和 b.txt 文件，-f 表示无需进行二次确认，强制删除</span><br><span class="line">rm -r backup     # 删除 backup 目录，-r 表示遍历目录内容(删除目录时必须加上该参数)</span><br><span class="line">rm -rf backup     # 删除 backup 目录，不需要二次确认</span><br><span class="line">=========================================================</span><br></pre></td></tr></table></figure>
</li>
<li><p>cat、less、more、head、tail 的区别</p>
</li>
</ol>
<h4 id="3-4-3-编辑基础操作命令"><a href="#3-4-3-编辑基础操作命令" class="headerlink" title="3.4.3 编辑基础操作命令"></a>3.4.3 编辑基础操作命令</h4><ol>
<li>vi<ol>
<li>格式:<code>vi 文件</code></li>
<li>vi/vim 的三种模式<ol>
<li>编辑模式：编辑文件内容</li>
<li>命令模式：可以完成一些快捷操作(进入文件后默认进入的是命令模式)</li>
<li>底行模式：完成命令操作</li>
</ol>
</li>
<li>模式转换<ol>
<li>命令模式 → 编辑模式：<ul>
<li>键盘键入 i ：从光标当前位置进入编辑模式</li>
<li>键盘键入 I ：将光标移动至行首进入编辑模式</li>
<li>键盘键入 a ：光标当前位置向后移动一位进入编辑模式</li>
<li>键盘键入 A ：光标移动至行尾进入编辑模式</li>
<li>键盘键入 o ：光标在当前行的下一行插入新行进入编辑模式</li>
<li>键盘键入 O ：光标在当前行的上一行插入新行进入编辑模式</li>
<li>键盘键入 s ：删除当前光标所在位置的下一个字符并进入编辑模式</li>
<li>键盘键入 S ：删除当前光标所在行的内容并进入编辑模式</li>
<li>键盘键入 C ：当前行内删除光标后的内容并进入编辑模式</li>
</ul>
</li>
<li>编辑模式 → 命令模式：键盘键入 Esc 即可</li>
<li>命令模式 → 底行模式：<ul>
<li>键盘键入 : 即可，一般之后需要输入 vi/vim 命令信息时使用</li>
<li>键盘键入 / 即可，进入文件从上向下检索状态(n 快速定位下一个，N 快速定位上一个)</li>
<li>键盘键入 ? 即可，进入文件从下向上检索状态(n 快速定位上一个，N 快速定位下一个)</li>
</ul>
</li>
<li>底行模式 → 命令模式：键盘键入 Esc 即可</li>
</ol>
</li>
<li>底行模式常见命令<ul>
<li><code>:wq</code>：保存并退出</li>
<li><code>:q!</code>：退出</li>
<li><code>:wq!</code>：强制保存退出</li>
<li><code>:set nu</code>：显示行号</li>
<li><code>:set nonu</code>：取消行号</li>
<li><code>:set list</code>：显示行尾定位符(可以用来确认行尾是否有空格，使用 <code>cat -A 文件</code> 也可实现)</li>
<li><code>:s#替换前字符串#替换后字符串#g</code>：在光标所在行进行字符串替换操作(g 代表全局，#为分隔符 → 可以使用 / @ 等进行替换)</li>
<li><code>:%s#替换前字符串#替换后字符串#g</code>：文件所有字符串替换操作</li>
<li><code>:n,ms#替换前字符串#替换后字符串#g</code>：n 行到 m 行进行替换操作，第一行 n=1</li>
<li><code>:ns#替换前字符串#替换后字符串#g</code>：对 n 行进行替换操作</li>
<li><code>:n,$s#替换前字符串#替换后字符串#g</code>：n 行到最后一行进行替换操作</li>
</ul>
</li>
<li>命令模式常见技巧<ul>
<li><code>G</code>：将光标快速移动到最后一行(可以使用行号+G 快速定位到某一行)</li>
<li><code>gg</code>：将光标快速移动到第一行</li>
<li><code>$</code>：将光标移动到所在行的行尾</li>
<li><code>^</code>：将光标移动到所在行的行首，数字 0 也可以实现该功能</li>
<li><code>yy</code>：复制光标所在行内容(多行复制操作：光标移动到多行内容的首行，然后使用格式 → 行数+yy 即可)</li>
<li><code>p</code>：在光标下一行新插入行粘贴剪切板内容(要粘贴多次可以使用格式 → 次数+p )</li>
<li><code>dd</code>：剪切光标所在行内容(多行剪切操作：光标移动到多行内容的首行，然后使用格式 → 行数+dd 即可)</li>
<li><code>u</code>：撤销操作</li>
<li><code>Ctrl+r</code>：恢复撤销操作</li>
<li><code>r</code>：将光标所在位置的下一字符直接做替换</li>
<li><code>R</code>：进入替换模式，相当于 Windows 的 insert 模式</li>
</ul>
</li>
<li>vi/vim 可能出现的问题<ul>
<li>编辑文件时，需要注意编辑文件路径是否存在(可以自动创建文件，但不能创建目录)</li>
<li>只能编辑文件，不能编辑目录</li>
<li>编辑文件突然出现异常时(断电)数据恢复方法：<code>vi -r 文件名</code>(-r 相当于 recover，即恢复) → 删除<code>.文件名.swp</code></li>
</ul>
</li>
<li>vi 编辑文件原理(.swp 文件)<ul>
<li>编辑文件时，会自动创建 .filename.swp 文件，将编辑的内容写入到该文件中</li>
<li>点击保存时，会将 .swp 文件另存为 filename 对源文件进行替换</li>
<li>断电后可以使用 .swp 文件对编辑但未保存的内容进行恢复</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="3-4-n-其他基础操作命令"><a href="#3-4-n-其他基础操作命令" class="headerlink" title="3.4.n 其他基础操作命令"></a>3.4.n 其他基础操作命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=========================================================</span><br><span class="line">grep &quot;^o&quot; vitest # 在 vitest 文件中查找以o开头的行(返回的是行内容)</span><br><span class="line">=========================================================</span><br></pre></td></tr></table></figure>

<h3 id="3-5-系统基础优化"><a href="#3-5-系统基础优化" class="headerlink" title="3.5 系统基础优化"></a>3.5 系统基础优化</h3><h4 id="3-5-1-系统主机名"><a href="#3-5-1-系统主机名" class="headerlink" title="3.5.1 系统主机名"></a>3.5.1 系统主机名</h4><ol>
<li><p>查看主机名：<code>hostname</code></p>
</li>
<li><p>临时更改主机名：<code>hostname ailyun</code>，重启后更改失效</p>
</li>
<li><p>查看主机名和一些其他信息：<code>hostnamectl</code></p>
</li>
<li><p>永久更改主机名：<code>hostnamectl set-hostname</code></p>
</li>
<li><p>实现主机名解析配置</p>
<ol>
<li>过程：<code>vi /etc/hosts</code> → 新增<code>10.0.0.2 aliyun</code>即可</li>
<li>好处：<ol>
<li>可以更便于利用主机名访问连接其他主机</li>
<li>简化服务配置文件的改动操作(服务中配置主机名(相当于域名)，在 /etc/hosts 做好解析即可)。当其他主机的 IP 发生变化时，仅修改 /etc/hosts 的 IP 即可，无需每个服务配置中的 IP 均修改</li>
</ol>
</li>
</ol>
</li>
<li><p>不同用户虚拟主机互访方式(ssh 方式)</p>
<ol>
<li><p>被访问虚拟软件中设置 NAT 映射：<code>192.168.14.252:9000 == 10.0.0.200:22</code></p>
<img src="oldboy_linux-img/image-20201113163703439.png" alt="image-20201113163703439" style="zoom:67%;" />
</li>
<li><p>访问主机输入命令：<code>ssh -p9000 192.168.14.252</code></p>
</li>
</ol>
</li>
</ol>
<h4 id="3-5-2-系统提示符"><a href="#3-5-2-系统提示符" class="headerlink" title="3.5.2 系统提示符"></a>3.5.2 系统提示符</h4><ol>
<li>变量的设置：<code>变量名 = 变量值</code></li>
<li>变量的取值：<code>$变量名</code></li>
<li>在命令行设置的变量为临时变量，只在当前用户生效，断电或者重新远程连接后消失。</li>
<li>变量的分类<ol>
<li>自定义变量：<ol>
<li>需要自行设置规划</li>
<li>没有特殊功能意义</li>
<li>只是当前用户生效</li>
<li>名称没有特殊规范，只要不是数字或符号开头即可</li>
</ol>
</li>
<li>系统环境变量<ol>
<li>系统自带默认设置</li>
<li>对系统功能有影响</li>
<li>对全部用户均生效</li>
<li>环境变量都是大写字母</li>
</ol>
</li>
</ol>
</li>
<li>提示符临时优化：<code>PS1=[\u@\h \W]\$</code> → <code>[\user@\host \Way]\$</code></li>
<li>提示符的永久修改：<code>vi /etc/profile</code>，在最后一行添加<code>PS1=[\u@\h \W]\$</code></li>
<li>系统字符颜色设置：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\[\e[32;1m\].....\[\e[0m\]     # ...代表要设置的内容</span><br><span class="line">PS1=&quot;\[\e[32;1m\][\u@\h \W]\\$ \e[0m\]&quot;     # 设置为蓝色</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-5-3-下载源"><a href="#3-5-3-下载源" class="headerlink" title="3.5.3 下载源"></a>3.5.3 下载源</h4><ol>
<li>两种仓库<ol>
<li>base 仓库优化：默认去官网下载</li>
<li>epel 仓库优化：企业应用扩展程序软件</li>
</ol>
</li>
<li>yum 优化完毕后下载软件异常<ol>
<li>本地网络问题</li>
<li>源镜像站的安全策略</li>
</ol>
</li>
<li>路径：<code>cd /etc/yum.repos.d/</code></li>
<li>两个文件：<code>CentOS-Base.repo</code> 和 <code>epel.repo</code></li>
<li>推荐使用阿里和清华的源，具体配置方式见官网</li>
</ol>
<h4 id="3-5-4-系统时间"><a href="#3-5-4-系统时间" class="headerlink" title="3.5.4 系统时间"></a>3.5.4 系统时间</h4><ol>
<li>系统时间查看：<code>timedatectl</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出参数说明</span></span><br><span class="line">Local time: Mon 2020-11-16 11:02:57 CST     # 本地时间</span><br><span class="line">Universal time: Mon 2020-11-16 03:02:57 UTC     # 格林尼治时间</span><br><span class="line">RTC time: Mon 2020-11-16 03:02:57     # 系统 BIOS 硬件时间</span><br><span class="line">Time zone: Asia/Shanghai (CST, +0800)     # 时区</span><br><span class="line">NTP enabled: yes     # 是否开启网络时间同步</span><br><span class="line">NTP synchronized: yes     # 是否进行了网络时间同步</span><br></pre></td></tr></table></figure></li>
<li>修改同步时间<ol>
<li>自动修改<ol>
<li>修改时区：<code>timedatectl list-timezones</code> → <code>/Shanghai</code> → <code>timedatectl set-timezone Asia/Shanghai</code></li>
<li>开启网络时间同步：<code>timedatectl set-ntp 1</code>(1 代表开，0 代表关)</li>
<li>安装时间同步程序：<code>yum -y install chrony</code></li>
<li>启动服务：<code>systemctl start chronyd</code></li>
</ol>
</li>
<li>手动与网络服务器校对修改<ol>
<li><code>yum install -y ntpdate</code></li>
<li><code>ntpdate time.windows.com</code> ：<code>ntpdate ntp时间服务器地址</code></li>
</ol>
</li>
<li>手工调节时间：<code>timedatectl set-time &quot;2020-11-11 15:00:00&quot;</code></li>
</ol>
</li>
</ol>
<h4 id="3-5-5-字符编码"><a href="#3-5-5-字符编码" class="headerlink" title="3.5.5 字符编码"></a>3.5.5 字符编码</h4><ol>
<li>两种字符编码：<code>UTF-8、GBK</code></li>
<li>字符编码环境变量：<code>LANG</code></li>
<li>调整字符编码<ol>
<li>临时：<ol>
<li><code>localectl list-locales</code> → 查看可配置的字符编码信息</li>
<li><code>LANG=zh_CN.utf8</code></li>
</ol>
</li>
<li>永久：<ol>
<li>方式一：<code>vi /etc/locale.conf</code> → <code>LANG=zh_CN.utf8</code> 即可</li>
<li>方式二：<code>localectl set-locale LANG=zh_CN.utf8</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="3-5-6-远程连接"><a href="#3-5-6-远程连接" class="headerlink" title="3.5.6 远程连接"></a>3.5.6 远程连接</h4><ol>
<li>目的：提高远程连接效率</li>
<li>步骤：<ol>
<li><code>cat -n /etc/ssh/sshd_config </code></li>
<li><code>79 GSSAPIAuthentication yes</code> → <code>GSSAPIAuthentication no</code></li>
<li><code>115 #UseDNS yes</code> → <code>UseDNS no</code></li>
</ol>
</li>
<li>修改方式：<ol>
<li><code>sed -i &#39;79s/yes/no/g&#39; /etc/ssh/sshd_config</code> → 对指定文件进行内容替换(79 行的 yes 替换为 no)</li>
<li><code>sed -i &#39;115s/#UseDNS yes/UseDNS no/g&#39; /etc/ssh/sshd_config</code></li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/12/12/06-linux-Linux%20%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="第一章-综合架构简介"><a href="#第一章-综合架构简介" class="headerlink" title="第一章 综合架构简介"></a>第一章 综合架构简介</h2><h3 id="1-1-综合架构服务组成"><a href="#1-1-综合架构服务组成" class="headerlink" title="1.1 综合架构服务组成"></a>1.1 综合架构服务组成</h3><h4 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h4><ol>
<li><p>运维领域所出现的服务程序，都是为了解决运维工作的痛点</p>
</li>
<li><p>基本图示</p>
<img src="imgs/image-20201207095207223.png" alt="image-20201207095207223" style="zoom: 67%;" />

<img src="imgs/73TG96P8JI5IOMQ920TZKF.jpg" alt="img" style="zoom: 50%;" />
</li>
<li><p>河马webshell查杀</p>
</li>
<li><p>越到后面并发处理能力越弱</p>
</li>
</ol>
<h4 id="1-1-2-前端部分"><a href="#1-1-2-前端部分" class="headerlink" title="1.1.2 前端部分"></a>1.1.2 前端部分</h4><ol>
<li>主要包括防火墙服务器、负载均衡服务器、web服务器</li>
</ol>
<h4 id="1-1-3-后端部分"><a href="#1-1-3-后端部分" class="headerlink" title="1.1.3 后端部分"></a>1.1.3 后端部分</h4><ol>
<li>主要包括数据库服务器、存储服务器、备份服务器、缓存服务器</li>
</ol>
<h4 id="1-1-4-管理部分"><a href="#1-1-4-管理部分" class="headerlink" title="1.1.4 管理部分"></a>1.1.4 管理部分</h4><ol>
<li>主要包括vpn服务器、跳板机服务器、监控服务器、批量管理服务器、yum仓库服务器</li>
</ol>
<h3 id="1-2-综合架构应用服务"><a href="#1-2-综合架构应用服务" class="headerlink" title="1.2 综合架构应用服务"></a>1.2 综合架构应用服务</h3><h4 id="1-2-1-前端部分"><a href="#1-2-1-前端部分" class="headerlink" title="1.2.1 前端部分"></a>1.2.1 前端部分</h4><ol>
<li>防火墙服务器：firewalld(重点)、iptables</li>
<li>负载均衡服务器：nginx(重点)、LVS、haproxy(大型企业用的多)</li>
<li>web服务器：nginx(html/css/js)、apache(html/css/js)、php(php)、tomcat(java)、uwsgi(python)、golang(go)</li>
</ol>
<h4 id="1-2-2-后端部分"><a href="#1-2-2-后端部分" class="headerlink" title="1.2.2 后端部分"></a>1.2.2 后端部分</h4><ol>
<li>数据库服务器：mysql、mariadb</li>
<li>存储服务器：nfs</li>
<li>备份服务器：rsync(远程备份)</li>
<li>缓存服务器：redis、memcache</li>
</ol>
<h4 id="1-2-3-管理部分"><a href="#1-2-3-管理部分" class="headerlink" title="1.2.3 管理部分"></a>1.2.3 管理部分</h4><ol>
<li>vpn服务器：openvpn、pptpvpn</li>
<li>跳板机服务器：jumpserver</li>
<li>监控服务器：zabbix、prometheus</li>
<li>批量管理服务器：ansible</li>
<li>yum仓库服务器：createrepo</li>
</ol>
<h3 id="1-3-综合架构部署前期规划"><a href="#1-3-综合架构部署前期规划" class="headerlink" title="1.3 综合架构部署前期规划"></a>1.3 综合架构部署前期规划</h3><table>
<thead>
<tr>
<th>部署顺序</th>
<th>主机名称</th>
<th>主机地址</th>
<th>服务程序</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>backup</td>
<td>10.0.0.41(外网)/172.16.1.41(内网)</td>
<td>rsync</td>
</tr>
<tr>
<td>02</td>
<td>nfs01</td>
<td>10.0.0.31(外网)/172.16.1.31(内网)</td>
<td>nfs</td>
</tr>
<tr>
<td>03</td>
<td>web01</td>
<td>10.0.0.7(外网)/172.16.1.7(内网)</td>
<td>nginx</td>
</tr>
<tr>
<td></td>
<td>web02</td>
<td>10.0.0.8(外网)/172.16.1.8(内网)</td>
<td>nginx</td>
</tr>
<tr>
<td></td>
<td>web03</td>
<td>10.0.0.9(外网)/172.16.1.9(内网)</td>
<td>nginx</td>
</tr>
<tr>
<td>04</td>
<td>db01</td>
<td>10.0.0.51(外网)/172.16.1.51(内网)</td>
<td>mariadb、mysql</td>
</tr>
<tr>
<td>05</td>
<td>web01-03</td>
<td>10.0.0.7-9(外网)/172.16.1.7-9(内网)</td>
<td>php、tomcat</td>
</tr>
<tr>
<td>06</td>
<td>lb01</td>
<td>10.0.0.5(外网)/172.16.1.5(内网)</td>
<td>nginx、LVS</td>
</tr>
<tr>
<td></td>
<td>lb02</td>
<td>10.0.0.6(外网)/172.16.1.6(内网)</td>
<td>nginx、LVS</td>
</tr>
<tr>
<td>07</td>
<td>zabbix-server</td>
<td>10.0.0.71(外网)/172.16.1.71(内网)</td>
<td>zabbix</td>
</tr>
<tr>
<td>08</td>
<td>vpn-server</td>
<td>10.0.0.81(外网)/172.16.1.81(内网)</td>
<td>openvpn</td>
</tr>
<tr>
<td>09</td>
<td>jumpserver</td>
<td>10.0.0.91(外网)/172.16.1.91(内网)</td>
<td>jumpserver(可选)</td>
</tr>
<tr>
<td>10</td>
<td>manager01</td>
<td>10.0.0.61(外网)/172.16.1.61(内网)</td>
<td>ansible</td>
</tr>
<tr>
<td>11</td>
<td>firewall</td>
<td>10.0.0.91(外网)/172.16.1.91(内网)</td>
<td>firewalld、iptables</td>
</tr>
<tr>
<td>12</td>
<td>yum-server</td>
<td>10.0.0.100(外网)/172.16.1.100(内网)</td>
<td>createrepo</td>
</tr>
</tbody></table>
<h3 id="1-4-综合架构虚拟主机准备"><a href="#1-4-综合架构虚拟主机准备" class="headerlink" title="1.4 综合架构虚拟主机准备"></a>1.4 综合架构虚拟主机准备</h3><ol>
<li><p>将模板主机还原到最纯净的状态</p>
</li>
<li><p>基础优化：</p>
<ul>
<li><p>下载源优化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装常用软件</span></span><br><span class="line">yum install -y wget vim telnet net-tools bash-completion lrzsz</span><br><span class="line"><span class="comment"># 阿里云仓库配置</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>时间同步优化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>
</li>
<li><p>提示符优化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">PS1=<span class="string">&quot;\[\e[32;1m\][\u@\h \W]\\$ \e[0m\]&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程连接优化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;79s/yes/no/g&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">&#x27;115s/#UseDNS yes/UseDNS no/g&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
</li>
<li><p>安全优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@libin ~]# systemctl stop firewalld</span><br><span class="line">[root@libin ~]# systemctl disable firewalld</span><br><span class="line">[root@libin ~]# setenforce 0</span><br><span class="line">[root@libin ~]# sed -i &quot;7s#enforcing#disabled#g&quot; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>确认网络配置信息</p>
<ul>
<li>添加网卡，改为 LAN 模式：<code>172.16.1.0/24</code></li>
<li><code>nmtui</code> → 修改IP地址为 <code>172.16.1.200/24</code></li>
</ul>
</li>
<li><p>克隆操作</p>
<ul>
<li><p>创建链接克隆：节省磁盘空间；缺点是模板主机出现故障时，所有链接主机均失效</p>
</li>
<li><p>创建完整克隆：克隆后的主机是独立的；缺点是占用磁盘空间</p>
</li>
<li><p>脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Centos7_yum仓库服务器_yum-server_10.0.0.100</span><br><span class="line">E:\VMware\</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname yum-server</span><br><span class="line">sed -i &#x27;s#200#100#g&#x27; /etc/sysconfig/network-scripts/ifcfg-eth[01]</span><br><span class="line">systemctl restart network</span><br><span class="line">ping www.baidu.com</span><br><span class="line">ping 10.0.0.254</span><br><span class="line"></span><br><span class="line">shutdown -r 0</span><br><span class="line">shutdown -h 0</span><br><span class="line"></span><br><span class="line">1. 网络修改完成</span><br><span class="line">2. 主机名修改完成</span><br><span class="line">3. 远程连接测试完成</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>拓展：CentOS 6 只有 network 管理网络、CentOS 7 有 network 和 NetworkManager 两个服务用于管理网络、CentOS 8 只有 NetworkManager 服务用于管理网络</p>
</li>
<li><p>拓展：克隆主机后网络服务无法重启的原因排查</p>
<ul>
<li>确认配置文件是否正确</li>
<li>确认网络管理服务是否冲突</li>
<li>确认配置文件信息与nmtui界面配置信息是否一致</li>
</ul>
</li>
</ol>
<h2 id="第二章-备份服务器服务"><a href="#第二章-备份服务器服务" class="headerlink" title="第二章 备份服务器服务"></a>第二章 备份服务器服务</h2><blockquote>
<p>2020-12-08 知识点回顾(白话)</p>
<ol>
<li>主要学习了备份服务和rsync的相关内容，包括了备份服务的作用、工作原理和方式以及rsync服务的部署安装、配置文件和一些常见的命令。</li>
<li>首先来说备份服务的作用。备份服务主要是用于备份系统配置文件、服务配置文件、用来做数据采集的日志文件等等重要的文件。</li>
<li>备份也分为了两个方面，一种是本地备份，主要的目的是用于修改文件错误后进行文件的比对，将文件还原为正确的版本。这里可以使用到diff命令和vimdiff命令，后者会将文件内容全部展示，且用颜色进行标记。前者仅会将文件的不同之处显示出来。</li>
<li>远程备份主要的目的是进行数据的还原。这里涉及到一个命令 → scp命令。常用的参数有两个，即 scp -pr，p参数表示在备份时保持文件属性不变，r参数表示使用递归进行备份，即备份目录。其格式是 scp -pr 源文件 目标主机ip:目录。</li>
<li>使用 scp 命令时有三个问题：一个是每次备份均需要输入密码，第二个是无法进行一些传输的限制，第三个是在进行备份时不同的用户需要进行权限的一些调整才可以使用。因此后面推荐使用 rsync 进行数据的备份。</li>
<li>在介绍 rsync 的使用之前，需要先了解备份的原理以及什么是增量备份。</li>
<li>备份的过程首先是用过TCP的三次握手建立连接，其次客户端发送认证的用户名和密码，服务端通过用户文件比对识别用户的合法性。验证成功之后在传输到服务端之后会有属主和属组的变更，将其改为服务端指定的用户进行管理。</li>
<li>对于增量备份，通俗理解就是在传输之前进行数据比对，只会备份变化的数据。比对的方式主要有两种，一种是通过一个md5算法进行比对(md5sum命令)；另一种是通过文件的属性进行比对。</li>
<li>rsync主要了解了部署安装、配置文件以及一些常用的命令参数与三种语法格式。</li>
<li>首先来说部署安装。主要是在服务器端进行部署，首先需要安装rsync这个程序软件，其次需要创建一个用户来对备份数据进行管理，一般是创建一个虚拟用户。接下来要创建备份目录，将备份的文件保存在此目录下，注意的点就是需要将该目录的属主和属组改为刚才创建的用于管理的虚拟用户。之后需要创建一个用户列表文件，里面存放认证使用的用户名和密码信息，因为是密码文件，所以此处需要将其权限改为600。然后需要修改配置文件，之后启动服务即可。</li>
<li>此处拓展了一下如何查看一个服务是否启动，以rsync为例，有四种方式可以查看。第一种是通过 systemctl status 来查看，第二种是使用ps -ef | grep rsync来查看是否有rsync的进程存在，第三种是通过net-tools这个软件的netstat -untpl命令通过端口号来进行查看，第四种可以查看配置文件中的 pid file对应的文件是否存在来查看该服务是否启动了。如果服务启动的话则该文件存在且里面的内容就是rsync服务的进程id，如果没有启动则该文件不存在。</li>
<li>接下来是rsync的配置文件。首先路径在/etc/rsyncd.conf中，主要包括了用于管理备份数据的uid、gid信息，服务端口信息port、模拟管理员用户的fake super、使用root用户使传输更加安全、最大连接数量、闲置连接的会话超时时间设置、pid文件、锁文件以及日志文件的路径、是否忽略简要的错误提升传输的可靠性、是否只读、显示模块列表、白名单、黑名单、认证用户、用户列表文件的路径、模块信息(最重要的是模块名和对应的地址信息)</li>
<li>服务端配置启动好之后，会监听端口，一旦有连接与其通讯的时候，就可以进行备份的操作。</li>
<li>在客户端，我们可以使用交互式和非交互式的方式进行备份数据。非交互方式有两种方式，一种是通过参数–password-file和创建一个密码文件(权限600)一起结合使用来达到免交互的效果。另一种是在/etc/profile文件中配置环境变量RSYNC_PASSWORD的方式来实现。此处需要注意的是需要在前面添加export将其转化为环境变量，可以使用env命令来查看环境变量。</li>
<li></li>
</ol>
</blockquote>
<h3 id="2-1-备份服务"><a href="#2-1-备份服务" class="headerlink" title="2.1 备份服务"></a>2.1 备份服务</h3><h4 id="2-1-1-备份服务概述"><a href="#2-1-1-备份服务概述" class="headerlink" title="2.1.1 备份服务概述"></a>2.1.1 备份服务概述</h4><ol>
<li><p>作用：主要用于备份服务器中重要的数据，例如系统配置文件、服务配置文件、服务日志文件(数据采集) …</p>
</li>
<li><p>早期：使用本地备份，目的是作为数据对比文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp /etc/hosts&#123;,.bak&#125; <span class="comment"># 编辑前进行本地备份处理</span></span><br><span class="line">diff /etc/hosts /etc/hosts.bak <span class="comment"># 不带颜色的文件对比(只显示不一样的部分)</span></span><br><span class="line">vimdiff /etc/hosts /etc/hosts.bak <span class="comment"># 带颜色的文件对比(全文显示)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程备份：主要用于数据还原</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp /etc/hosts 172.16.1.41:/backup <span class="comment"># 使用 ssh 远程备份文件(推送数据)</span></span><br><span class="line"><span class="comment"># 问题：无法实现文件的属性时间(总是备份时的时间)</span></span><br><span class="line">scp -p /etc/hosts 172.16.1.41:/backup <span class="comment"># 使用 ssh 远程备份文件，且保持文件属性</span></span><br><span class="line"><span class="comment"># 问题：无法实现备份目录</span></span><br><span class="line">scp -pr /etc 172.16.1.41:/backup <span class="comment"># 使用 ssh 远程备份目录</span></span><br><span class="line"><span class="comment"># 问题：如何实现恢复</span></span><br><span class="line">scp -p 172.16.1.41:/backup /etc/hosts <span class="comment"># 使用 ssh 远程恢复文件(拉取数据)</span></span><br><span class="line"><span class="comment"># 问题：使用 scp 时的痛点</span></span><br><span class="line"><span class="comment"># 1. 每次备份数据均需要输入密码 → 无法实现自动化</span></span><br><span class="line"><span class="comment"># 2. 备份数据时无法进行传输限制</span></span><br><span class="line"><span class="comment"># 3. 备份数据时不同用户需要进行权限调整</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-1-2-备份服务工作原理"><a href="#2-1-2-备份服务工作原理" class="headerlink" title="2.1.2 备份服务工作原理"></a>2.1.2 备份服务工作原理</h4><ol>
<li><p>数据传输备份原理(rsync)</p>
<ul>
<li><p>图示</p>
<p><img src="imgs/image-20201208101448697.png" alt="image-20201208101448697"></p>
</li>
<li><p>过程</p>
<ul>
<li>通过TCP三次握手建立网络连接</li>
<li>进行身份验证。客户端发送用户密码信息，服务端对比用户文件验证合法性</li>
<li>数据传输后需要进行属主和属组的变化。客户端文件属性信息统一变为服务端指定的用户信息</li>
</ul>
</li>
</ul>
</li>
<li><p>数据增量备份原理(rsync)</p>
<ul>
<li><p>原理：在数据远程传输之前需要进行数据比对。</p>
</li>
<li><p>比对方式</p>
<ul>
<li><p>根据文件sha/md5算法进行比对(根据文件名称以及文件内容识别文件之间的区别)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">md5sum /etc/hosts</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据文件属性信息进行比对(根据权限、时间、大小信息等进行区别)</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="2-1-3-备份服务的方式"><a href="#2-1-3-备份服务的方式" class="headerlink" title="2.1.3 备份服务的方式"></a>2.1.3 备份服务的方式</h4><ol>
<li>定时备份数据：编写好备份数据的脚本文件，将其放入到定时任务中即可</li>
<li>实时备份数据：先对目录数据变化进行监控，然后利用rsync将变化的数据进行备份</li>
</ol>
<h3 id="2-2-rsync"><a href="#2-2-rsync" class="headerlink" title="2.2 rsync"></a>2.2 rsync</h3><h4 id="2-2-1-部署安装"><a href="#2-2-1-部署安装" class="headerlink" title="2.2.1 部署安装"></a>2.2.1 部署安装</h4><ol>
<li><p>服务端部署：</p>
<ol>
<li><p>在备份服务器上安装rsync</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建管理备份目录以及数据的用户信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd rsync -M -s /sbin/nologin</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建备份目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /backup</span><br><span class="line">   chown rsync. /backup</span><br><span class="line">   ll /backup -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建用户列表文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;rsync_backup:linus&#x27;</span> &gt; /etc/rsync.password</span><br><span class="line">chmod 600 /etc/rsync.password</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyncd.conf</span><br><span class="line"></span><br><span class="line">uid = rsync</span><br><span class="line">gid = rsync</span><br><span class="line">port = 873</span><br><span class="line">fake super = yes</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 300</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsync.lock</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line">ignore errors</span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line">list = <span class="literal">false</span></span><br><span class="line">hosts allow = 172.16.1.0/24</span><br><span class="line">hosts deny = 0.0.0.0/32</span><br><span class="line">auth users = rsync_backup</span><br><span class="line">secrets file = /etc/rsync.password</span><br><span class="line">[backup]</span><br><span class="line">comment = <span class="string">&quot;backup dir by oldboy&quot;</span></span><br><span class="line">path = /backup</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start rsyncd</span><br><span class="line">ps -ef | grep <span class="string">&quot;rsync&quot;</span></span><br><span class="line">netstat -lntup | grep 873 <span class="comment"># 查看系统网络服务状态，可以用于查看某个服务是否开启了(该命令属于net-tools程序)，参数记忆为 -untpl</span></span><br><span class="line"><span class="comment"># -l 显示网络监听信息</span></span><br><span class="line"><span class="comment"># -n 端口信息以数字方式显示</span></span><br><span class="line"><span class="comment"># -t 显示TCP协议的信息</span></span><br><span class="line"><span class="comment"># -u 显示UDP协议的信息</span></span><br><span class="line"><span class="comment"># -p 显示服务对应的进程信息(PID/Program name)</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>客户端部署：</p>
<ul>
<li><p>交互式实现数据传输</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup <span class="comment"># rsync -avz 备份文件 用户名@备份服务器ip::模块名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>免交互实现数据传输</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：使用文件的方式(在客户端操作)</span></span><br><span class="line"><span class="built_in">echo</span> linus &gt; /etc/rsync.password <span class="comment"># 在客户端创建密码文件</span></span><br><span class="line">chmod 600 /etc/rsync.password <span class="comment"># 更改权限</span></span><br><span class="line">rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：使用环境变量的方式(在客户端操作)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export RSYNC_PASSWORD=linus&#x27;</span> &gt;&gt; /etc/profile <span class="comment"># export 指令的作用是将一个普通变量变为环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拓展： env 命令：输出所有的环境变量</span></span><br><span class="line">env | grep RSYNC_PASSWORD</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>拓展：rsync 方式与 scp 方式在进行文件传输时的区别</p>
<ul>
<li>可以实现增量复制目录下面的数据</li>
<li>复制目录时，目录后面有无斜线是有区别的<ul>
<li>scp ：无论有无斜线均复制目录；有星号时复制目录下内容</li>
<li>rsync：无斜线时复制目录；有斜线时复制目录下内容</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="2-2-2-配置文件"><a href="#2-2-2-配置文件" class="headerlink" title="2.2.2 配置文件"></a>2.2.2 配置文件</h4><ol>
<li><p>路径：<code>/etc/rsyncd.conf</code></p>
</li>
<li><p>配置说明</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uid = rsync <span class="comment"># 指定rsync服务备份目录或者数据信息管理的用户信息</span></span><br><span class="line">gid = rsync <span class="comment"># 指定rsync服务备份目录或者数据信息管理的用户组信息</span></span><br><span class="line">port = 873 <span class="comment"># 指定服务端口号，如果修改后客户端在使用时需要加参数 --port=xxx</span></span><br><span class="line">fake super = yes <span class="comment"># uid指令指定的用户可以伪装为管理员用户</span></span><br><span class="line">use chroot = no <span class="comment"># 提高数据备份安全性(前提：需要将备份目录权限与uid信息设置为root用户)</span></span><br><span class="line">max connections = 200 <span class="comment"># 设置最大连接数(客户端连接数量)→ 保证已有连接的传输效率</span></span><br><span class="line">timeout = 300 <span class="comment"># 设置闲置连接的会话超时时间(单位是秒)</span></span><br><span class="line">pid file = /var/run/rsyncd.pid <span class="comment"># 记录服务程序的pid文件(自动生成和删除，可以用来判断服务是否启动)，用于记录进程号码</span></span><br><span class="line">lock file = /var/run/rsync.lock <span class="comment"># 记录服务程序的锁文件</span></span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log <span class="comment"># 日志文件</span></span><br><span class="line">ignore errors <span class="comment"># 忽略错误(尽量忽略简单的异常错误，提高传输的可靠性)</span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span> <span class="comment"># 指定备份数据的目录是否是只读的</span></span><br><span class="line">list = <span class="literal">false</span> <span class="comment"># 列表显示备份服务模块信息</span></span><br><span class="line">hosts allow = 172.16.1.0/24 <span class="comment"># 白名单(允许客户端主机地址进行访问)</span></span><br><span class="line">hosts deny = 0.0.0.0/32 <span class="comment"># 黑名单(拒绝客户端主机地址的访问)</span></span><br><span class="line">auth users = rsync_backup <span class="comment"># 指定可以进行认证的用户(该用户不需要在系统中存在，仅在服务中做认证使用)</span></span><br><span class="line">secrets file = /etc/rsync.password <span class="comment"># 用户密码文件(格式为：username:password，权限必须是600，属主和属组为root)</span></span><br><span class="line">[backup] <span class="comment"># 模块信息，下面的内容为局部配置信息</span></span><br><span class="line">comment = <span class="string">&quot;backup dir by oldboy&quot;</span> <span class="comment"># 模块注释说明</span></span><br><span class="line">path = /backup <span class="comment"># 指定模块对应的备份目录(建议模块名和备份路径名保持一致)</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-2-3-常见命令"><a href="#2-2-3-常见命令" class="headerlink" title="2.2.3 常见命令"></a>2.2.3 常见命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 语法格式一：rsync 可以实现数据本地备份，与 cp 一致</span><br><span class="line">rsync &#x2F;etc&#x2F;hosts &#x2F;backup&#x2F;</span><br><span class="line"># 语法格式二：rsync 可以实现数据远程备份，与 scp 一致</span><br><span class="line">rsync -avz &#x2F;etc&#x2F;hosts root@172.16.1.41:&#x2F;tmp # 将本地数据推送到远程主机上</span><br><span class="line">rsync -avz root@172.16.1.41:&#x2F;tmp&#x2F;hosts &#x2F;etc # 将远程数据拉取到本地主机上</span><br><span class="line"># 语法格式三：基于守护进程的方式实现数据传输</span><br><span class="line">rsync -avz &#x2F;etc&#x2F;hosts rsync_backup@172.16.1.41::backup # 本地 → 远程</span><br><span class="line">rsync -avz &#x2F;etc&#x2F;hosts rsync:&#x2F;&#x2F;rsync_backup@172.16.1.41:888&#x2F;backup # 本地 → 远程</span><br><span class="line">rsync -avz rsync_backup@172.16.1.41::backup&#x2F;hosts &#x2F;etc&#x2F; # 本地 → 远程</span><br><span class="line"># 常用参数</span><br><span class="line"># -v → 显示传输的过程(定时任务中可以不需要该参数)</span><br><span class="line"># -z → 在传输时对文件做压缩处理</span><br><span class="line"># -a → 等价于执行了 -rlptgoD</span><br><span class="line"># -r → 可以递归传输数据(传输目录)</span><br><span class="line"># -l → 可以复制软链接文件(仅复制快捷方式，无意义)</span><br><span class="line"># -L → 可以复制软链接指向的源文件</span><br><span class="line"># -p → 维持属性中的权限不改变</span><br><span class="line"># -t → 维持属性中的修改时间不改变</span><br><span class="line"># -o → 维持属性中的属主不改变(仅对管理员用户生效，即配置文件中的uid和gid均需要调整为root，且fake super需要注释)</span><br><span class="line"># -g → 维持属性中的属组不改变</span><br><span class="line"># -D → 传输设备文件时可以保持设备文件属性保持不变</span><br><span class="line"># -P → 显示传输进度</span><br></pre></td></tr></table></figure>

<h3 id="2-3-备份服务企业应用"><a href="#2-3-备份服务企业应用" class="headerlink" title="2.3 备份服务企业应用"></a>2.3 备份服务企业应用</h3><h4 id="2-3-1-备份服务的多模块配置"><a href="#2-3-1-备份服务的多模块配置" class="headerlink" title="2.3.1 备份服务的多模块配置"></a>2.3.1 备份服务的多模块配置</h4><ol>
<li><p>作用：可以实现数据的分类存储</p>
</li>
<li><p>配置方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端配置</span></span><br><span class="line"><span class="comment"># 1. 编写配置文件</span></span><br><span class="line">[oldgirl_backup]</span><br><span class="line">comment = <span class="string">&quot;backup dir by oldgirl&quot;</span></span><br><span class="line">path = /oldgirl_backup</span><br><span class="line">auth users = oldgirl_bak</span><br><span class="line">[oldboy_backup]</span><br><span class="line">comment = <span class="string">&quot;backup dir by oldboy&quot;</span></span><br><span class="line">path = /oldboy_backup</span><br><span class="line">auth users = oldboy_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建备份目录</span></span><br><span class="line">mkdir /oldgirl_backup</span><br><span class="line">chown rsync. /oldgirl_backup</span><br><span class="line">mkdir /oldboy_backup</span><br><span class="line">chown rsync. /oldboy_backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置用户列表文件</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;oldgirl_bak:oldgirl\noldboy_bak:oldboy&quot;</span> &gt;&gt; /etc/rsync.password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 重启服务</span></span><br><span class="line">systemctl restart rsyncd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端配置</span></span><br><span class="line"><span class="comment"># 1. 配置密码文件</span></span><br><span class="line"><span class="built_in">echo</span> oldgirl &gt; /etc/oldgirl_bak_rsync_password</span><br><span class="line">chmod 600 /etc/oldgirl_bak_rsync_password</span><br><span class="line"><span class="built_in">echo</span> oldboy &gt; /etc/oldboy_bak_rsync_password</span><br><span class="line">chmod 600 /etc/oldboy_bak_rsync_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">rsync -avz /etc/hosts oldboy_bak@172.16.1.41::oldboy_backup --password-file=/etc/oldboy_bak_rsync_password</span><br><span class="line">rsync -avz /etc/hosts oldgirl_bak@172.16.1.41::oldgirl_backup --password-file=/etc/oldgirl_bak_rsync_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充说明：单个模块实现多个目录分类管理</span></span><br><span class="line">rsync -avz /etc/hosts oldboy_bak@172.16.1.41::oldboy_backup/network <span class="comment"># 直接加上/network即可，不存在会自动创建</span></span><br><span class="line"><span class="comment"># 注意：只能创建单级目录，不能创建多级目录</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-3-2-备份服务的数据排除功能"><a href="#2-3-2-备份服务的数据排除功能" class="headerlink" title="2.3.2 备份服务的数据排除功能"></a>2.3.2 备份服务的数据排除功能</h4><ol>
<li><p>作用：在备份目录时，需要将目录中的某些数据排除掉</p>
</li>
<li><p>配置方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境准备</span></span><br><span class="line"><span class="built_in">cd</span> data</span><br><span class="line">mkdir &#123;a..c&#125;_dir</span><br><span class="line">touch &#123;a..c&#125;_dir/file&#123;01..03&#125;.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：a_dir中的file01.txt不要备份</span></span><br><span class="line"><span class="comment"># 需要用到 --exclude 参数，排除多个的时候可以使用多次，注意需要使用相对路径</span></span><br><span class="line">rsync -avz /data/ oldgirl_bak@172.16.1.41::oldgirl_backup --exclude a_dir/file01.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：a_file整个目录排除；b_dir中的file02.txt不要备份</span></span><br><span class="line"><span class="comment"># 需要用到 --exclude-from=xxx，文件里面使用相对路径</span></span><br><span class="line">touch /tmp/rsync_exclude.txt</span><br><span class="line">vim /tmp/rsync_exclude.txt</span><br><span class="line">rsync -avz /data/ oldgirl_bak@172.16.1.41::oldgirl_backup --exclude-from /tmp/rsync_exclude.txt</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-3-3-备份服务的安全访问控制"><a href="#2-3-3-备份服务的安全访问控制" class="headerlink" title="2.3.3 备份服务的安全访问控制"></a>2.3.3 备份服务的安全访问控制</h4><ol>
<li><p>作用：显示可以与备份服务器进行网络通讯的主机</p>
</li>
<li><p>配置方法：设置白名单和黑名单</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求一：只允许172.16.1.31主机进行数据备份</span></span><br><span class="line"><span class="comment"># 方法：只配置白名单，黑名单注释使其失效</span></span><br><span class="line">hosts allow = 172.16.1.31</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求二：仅172.16.1.31主机禁止数据备份</span></span><br><span class="line"><span class="comment"># 方法：只配置黑名单，白名单注释使其失效</span></span><br><span class="line">hosts deny = 172.16.1.31</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问控制策略：</span></span><br><span class="line"><span class="comment"># 1. 只有白名单，匹配白名单的放行，不匹配的阻止</span></span><br><span class="line"><span class="comment"># 2. 只有黑名单，匹配黑名单的阻止，不匹配的放行</span></span><br><span class="line"><span class="comment"># 3. 既有黑名单也有白名单，先匹配白名单，匹配的放行，不匹配的看黑名单。黑名单匹配的阻止，不匹配的放行</span></span><br><span class="line"><span class="comment"># 4. 既在黑名单又在白名单上，白名单优先</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问控制策略图示</p>
<img src="imgs/image-20201209111010787.png" alt="image-20201209111010787" style="zoom: 67%;" />

</li>
</ol>
<h4 id="2-3-4-备份服务的无差异同步"><a href="#2-3-4-备份服务的无差异同步" class="headerlink" title="2.3.4 备份服务的无差异同步"></a>2.3.4 备份服务的无差异同步</h4><ol>
<li><p>作用：保证客户端数据与备份服务端的数据一致</p>
</li>
<li><p>配置方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rsync -avz /data/ oldgirl_bak@172.16.1.41::oldgirl_backup --delete</span><br></pre></td></tr></table></figure>
</li>
<li><p>企业应用</p>
<ul>
<li>保证线上服务端和线下服务端的数据一致性</li>
</ul>
</li>
<li><p>注意：慎用<code>--delete</code>，如果目录不正确，则会将备份服务器或者客户端的所有内容删除</p>
</li>
</ol>
<h4 id="2-3-5-备份服务的传输限速功能"><a href="#2-3-5-备份服务的传输限速功能" class="headerlink" title="2.3.5 备份服务的传输限速功能"></a>2.3.5 备份服务的传输限速功能</h4><ol>
<li><p>作用：防止某个主机占用过多带宽导致其他服务器无法进行数据的传输</p>
</li>
<li><p>配置方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">--bwlimit=100 <span class="comment"># 默认单位是kB/s</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-3-6备份服务的列表查询功能"><a href="#2-3-6备份服务的列表查询功能" class="headerlink" title="2.3.6备份服务的列表查询功能"></a>2.3.6备份服务的列表查询功能</h4><ol>
<li><p>作用</p>
</li>
<li><p>配置方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端修改配置文件</span></span><br><span class="line">list = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端查看模块列表</span></span><br><span class="line">rsync 172.16.1.41:: </span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-4-架构备份服务项目实战"><a href="#2-4-架构备份服务项目实战" class="headerlink" title="2.4 架构备份服务项目实战"></a>2.4 架构备份服务项目实战</h3><h4 id="2-4-1-项目实战方案规划"><a href="#2-4-1-项目实战方案规划" class="headerlink" title="2.4.1 项目实战方案规划"></a>2.4.1 项目实战方案规划</h4><ol>
<li><p>项目前言介绍(目前的痛点)</p>
</li>
<li><p>项目需求说明</p>
<blockquote>
<ol>
<li>所有服务器的备份目录必须都为 /backup</li>
<li>要备份的系统配置文件包括但不限于：</li>
</ol>
<ul>
<li>定时任务服务的配置文件(/var/spool/cron/root) → 适合web和nfs服务器</li>
<li>开机自启动的配置文件(/etc/rc.local) → 适合web和nfs服务器</li>
<li>日常脚本的目录(/server/scripts)</li>
<li>防火墙iptables的配置文件(/etc/sysconfig/iptables)</li>
</ul>
<ol start="3">
<li>Web服务器站点目录假定为/var/html/www/</li>
<li>Web服务器访问日志路径假定为/app/logs/</li>
<li>服务器保留打包后的7天的备份数据即可(本地留存不能多于7天，因为太多硬盘会满)</li>
<li>备份服务器上,保留每周一的所有数据副本，其它要保留6个月的数据副本。</li>
</ol>
<ul>
<li>方案一：对周一数据进行标记</li>
<li>方式二：备份服务器可以单独将周一数据提取出来</li>
</ul>
<ol start="7">
<li>备份服务器上,要按照备份数据服务器的内网IP为目录名称保存备份，备份的文件按照时间名字保存</li>
<li>需要确保备份的数据尽量完整正确，在备份服务器上对备份的数据进行检查，把备份的成功及失败结果信息发给系统管理员邮箱中</li>
</ol>
</blockquote>
</li>
<li><p>项目实施进度</p>
</li>
<li><p>项目实战部署</p>
</li>
<li><p>拓展：<code>md5sum -c check.txt</code> 的工作原理</p>
<ol>
<li>读取文件信息(读取到校验值和文件名)</li>
<li>根据文件内容查看数据信息</li>
<li>将读取文件的校验值与源check文件的校验值做对比</li>
</ol>
</li>
</ol>
<h4 id="2-4-2-项目实战实施部署"><a href="#2-4-2-项目实战实施部署" class="headerlink" title="2.4.2 项目实战实施部署"></a>2.4.2 项目实战实施部署</h4><ol>
<li><p>客户端部署(nfs01、web01)</p>
<ol>
<li><p>免交互传输数据功能：配置环境变量</p>
</li>
<li><p>编写脚本完成需求</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建脚本目录和脚本文件</span></span><br><span class="line">mkdir -p /server/scripts</span><br><span class="line">touch bachup_date.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 backup_date.sh 脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 初始化变量</span></span><br><span class="line">Eth1_ip=`ip a s eth1 | awk -F <span class="string">&quot;[ /]+&quot;</span> <span class="string">&#x27;NR==3&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">Date_info=`date <span class="string">&quot;+%F_星期%w&quot;</span> -d <span class="string">&quot;-1 day&quot;</span>`</span><br><span class="line"><span class="comment"># 1. 创建本地备份目录(包括ip地址)</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /backup ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	mkdir -p /backup/<span class="variable">$Eth1_ip</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 2. 打包备份数据到本地(注意软链接文件和时间问题)</span></span><br><span class="line">tar zcfh /backup/<span class="variable">$&#123;Eth1_ip&#125;</span>/system_backup_<span class="variable">$&#123;Date_info&#125;</span>.tar.gz /var/spool/cron/root /etc/rc.local /server/scripts /etc/sysconfig/iptables &amp;&gt; /dev/null</span><br><span class="line"><span class="comment"># 3. 清除七天前的历史备份数据</span></span><br><span class="line">find /backup/<span class="variable">$&#123;Eth1_ip&#125;</span>/ -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.gz&quot;</span> -mtime +7 -delete</span><br><span class="line"><span class="comment"># 4. 生成每天数据的校验文件</span></span><br><span class="line">find /backup/<span class="variable">$Eth1_ip</span>/ -mmin -10 -name <span class="string">&quot;*.tar.gz&quot;</span> | xargs md5sum &gt; /backup/<span class="variable">$Eth1_ip</span>/check.txt</span><br><span class="line"><span class="comment"># 5. 传输备份数据</span></span><br><span class="line">rsync -az /backup/<span class="variable">$Eth1_ip</span> linus@172.16.1.41::backup</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写定时任务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0 * * * &#x2F;bin&#x2F;sh &#x2F;server&#x2F;scripts&#x2F;backup_data.sh &amp;&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>服务端部署(backup)</p>
<ol>
<li><p>部署搭建 rsync 服务</p>
</li>
<li><p>对备份的数据做完整性校验</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建脚本目录和脚本文件</span></span><br><span class="line">mkdir -p /server/scripts</span><br><span class="line">touch bachup_date.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 backup_date.sh 脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 1. 校验数据完整性</span></span><br><span class="line">find /backup/ -<span class="built_in">type</span> f -name <span class="string">&quot;check.txt&quot;</span> | xargs mdssum -c &gt; /var/<span class="built_in">log</span>/backup.log</span><br><span class="line"><span class="comment"># 2. 发送邮件(校验结果信息)</span></span><br><span class="line">mail -s <span class="string">&quot;backup_check&quot;</span> 714616622@qq.com &lt; /var/<span class="built_in">log</span>/backup.log</span><br><span class="line"><span class="comment"># 3. 清理180天以前的数据</span></span><br><span class="line">find /backup/ -<span class="built_in">type</span> f -mtime +180 ! -name <span class="string">&quot;*_星期1.tar.gz&quot;</span> -delete</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   <span class="comment"># 邮件配置</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 1. 编辑配置文件 /etc/maul.rc</span></span><br><span class="line"><span class="built_in">set</span> from=714616622@qq.com smtp=smtp.qq.com     <span class="comment"># 邮件发送邮件服务器域名</span></span><br><span class="line">   <span class="built_in">set</span> smtp-auth-user=714616622@qq.com smtp-auth-password=abftwbzzphewbeah smtp-auth=login</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 2. 重启服务</span></span><br><span class="line">   systemctl restart postfix.service</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 3. 测试邮件功能</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;xxx&quot;</span> | mail -s <span class="string">&quot;标题&quot;</span> lbrunnerboy@gmail.com</span><br></pre></td></tr></table></figure></li>
<li><p>编写定时任务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0 8 * * * /bin/sh /server/scripts/backup_server.sh &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h4 id="2-4-3-项目实施验收检查"><a href="#2-4-3-项目实施验收检查" class="headerlink" title="2.4.3 项目实施验收检查"></a>2.4.3 项目实施验收检查</h4><h4 id="2-4-4-项目实战-自己的代码"><a href="#2-4-4-项目实战-自己的代码" class="headerlink" title="2.4.4 项目实战(自己的代码)"></a>2.4.4 项目实战(自己的代码)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份服务器代码：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 数据完整性校验</span></span><br><span class="line">find /backup -<span class="built_in">type</span> f -name <span class="string">&quot;check.pw&quot;</span> | xargs md5sum -c &gt; /var/<span class="built_in">log</span>/Integrity_check</span><br><span class="line"><span class="comment"># 邮件发送</span></span><br><span class="line">mail -s <span class="string">&quot;备份数据结果&quot;</span> 446951558@qq.com &lt; /var/<span class="built_in">log</span>/Integrity_check</span><br><span class="line"><span class="comment"># 保留每周一的所有数据副本，其他保留6个月的数据副本</span></span><br><span class="line">find /backup -<span class="built_in">type</span> f ! -name <span class="string">&quot;*Monday.tar.gz&quot;</span> -mtime +180 -name -delete</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nfs 服务器代码：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=linus(定时任务无法识别环境变量)</span><br><span class="line">date_info=$(date <span class="string">&quot;+%F_%A&quot;</span> -d <span class="string">&quot;-1 day&quot;</span>) <span class="comment"># 备份时间信息</span></span><br><span class="line">bak_dir=<span class="string">&quot;/backup/<span class="subst">$(/usr/sbin/ip a s eth1 | awk -F <span class="string">&quot;[ /]+&quot;</span> &#x27;NR==3&#123;print $3&#125;&#x27;)</span>&quot;</span> <span class="comment"># 备份目标目录(后面不加/的原因是需要在rsync备份时将目录及其子文件传输)</span></span><br><span class="line">bak_system_data=<span class="string">&quot;/var/spool/cron/root /etc/rc.local /server/scripts /etc/sysconfig/iptables&quot;</span> <span class="comment"># 备份数据列表(系统文件)</span></span><br><span class="line">bak_web_code=<span class="string">&quot;/var/html/www&quot;</span> <span class="comment"># 备份数据列表(代码文件)</span></span><br><span class="line">bak_web_log=<span class="string">&quot;/app/logs&quot;</span> <span class="comment"># 备份数据列表(日志文件)</span></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$bak_dir</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$bak_dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 压缩数据</span></span><br><span class="line">tar zcfh <span class="variable">$bak_dir</span>/system_data_<span class="variable">$&#123;date_info&#125;</span>.tar.gz <span class="variable">$bak_system_data</span></span><br><span class="line"><span class="comment"># 删除七天前的数据</span></span><br><span class="line">find <span class="variable">$bak_dir</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.gz&quot;</span> -mtime +7 -delete</span><br><span class="line"><span class="comment"># 数据校验</span></span><br><span class="line">find <span class="variable">$bak_dir</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.gz&quot;</span> -mmin -200 | xargs md5sum &gt; <span class="variable">$bak_dir</span>/check.pw</span><br><span class="line"><span class="comment"># rsync 备份</span></span><br><span class="line">rsync -az <span class="variable">$bak_dir</span> linus@172.16.1.41::backup</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web 服务器代码：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=linus</span><br><span class="line">date_info=$(date <span class="string">&quot;+%F_%A&quot;</span> -d <span class="string">&quot;-1 day&quot;</span>) <span class="comment"># 备份时间信息</span></span><br><span class="line">bak_dir=<span class="string">&quot;/backup/<span class="subst">$(/usr/sbin/ip a s eth1 | awk -F <span class="string">&quot;[ /]+&quot;</span> &#x27;NR==3&#123;print $3&#125;&#x27;)</span>&quot;</span> <span class="comment"># 备份目标目录(后面不加/的原因是需要在rsync备份时将目录及其子文件传输)</span></span><br><span class="line">bak_system_data=<span class="string">&quot;/var/spool/cron/root /etc/rc.local /server/scripts /etc/sysconfig/iptables&quot;</span> <span class="comment"># 备份数据列表(系统文件)</span></span><br><span class="line">bak_web_code=<span class="string">&quot;/var/html/www&quot;</span> <span class="comment"># 备份数据列表(代码文件)</span></span><br><span class="line">bak_web_log=<span class="string">&quot;/app/logs&quot;</span> <span class="comment"># 备份数据列表(日志文件)</span></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$bak_dir</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$bak_dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 压缩数据</span></span><br><span class="line">tar zcfh <span class="variable">$bak_dir</span>/system_data_<span class="variable">$&#123;date_info&#125;</span>.tar.gz <span class="variable">$bak_system_data</span></span><br><span class="line">tar zcfh <span class="variable">$bak_dir</span>/web_code_<span class="variable">$&#123;date_info&#125;</span>.tar.gz <span class="variable">$bak_web_code</span></span><br><span class="line">tar zcfh <span class="variable">$bak_dir</span>/web_log_<span class="variable">$&#123;date_info&#125;</span>.tar.gz <span class="variable">$bak_web_log</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="comment"># 删除七天前的数据</span></span><br><span class="line">find <span class="variable">$bak_dir</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.gz&quot;</span> -mtime +7 -delete</span><br><span class="line"><span class="comment"># 数据校验</span></span><br><span class="line">find <span class="variable">$bak_dir</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.gz&quot;</span> -mmin -200 | xargs md5sum &gt; <span class="variable">$bak_dir</span>/check.pw</span><br><span class="line"><span class="comment"># rsync 备份</span></span><br><span class="line">rsync -az <span class="variable">$bak_dir</span> linus@172.16.1.41::backup</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 邮件配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 编辑配置文件 /etc/maul.rc</span></span><br><span class="line"><span class="built_in">set</span> from=714616622@qq.com <span class="comment"># 指定要连接访问邮箱服务</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtp.qq.com     <span class="comment"># 邮件发送邮件服务器域名</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=714616622@qq.com <span class="comment"># 邮箱账号信息</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=abftwbzzphewbeah <span class="comment"># 邮箱密码信息</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login <span class="comment"># 需要进行远程连接登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 重启服务</span></span><br><span class="line">systemctl restart postfix.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 测试邮件功能</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xxx&quot;</span> | mail -s <span class="string">&quot;标题&quot;</span> lbrunnerboy@gmail.com</span><br><span class="line">mail -s <span class="string">&quot;标题&quot;</span> lbrunnerboy@gmail.com &lt; /etc/mailcontent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拓展</span></span><br><span class="line">mailq <span class="comment"># 查看邮件发送队列</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拓展：如何获取ip地址</span></span><br><span class="line"><span class="comment"># 1. 先在 /etc/hosts 中配置好ip映射信息</span></span><br><span class="line"><span class="comment"># 2. 使用 hostname -i 即可获取到ip地址</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-实时备份"><a href="#2-5-实时备份" class="headerlink" title="2.5 实时备份"></a>2.5 实时备份</h3><h4 id="2-5-1-实时同步概述"><a href="#2-5-1-实时同步概述" class="headerlink" title="2.5.1 实时同步概述"></a>2.5.1 实时同步概述</h4><ol>
<li>目的：确保指定备份目录中数据产生变化时及时进行传输备份</li>
<li>实时同步应用：用户上传的数据信息，建议进行无差异实时同步(用户自己删除数据属于主观行为，企业服务器无特殊需求时无需备份用户数据)</li>
</ol>
<h4 id="2-5-2-如何监控数据变化"><a href="#2-5-2-如何监控数据变化" class="headerlink" title="2.5.2 如何监控数据变化"></a>2.5.2 如何监控数据变化</h4><ol>
<li><p>工具：inotify-tools</p>
</li>
<li><p>目的：监控目录数据变化</p>
</li>
<li><p>部署：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装在客户端</span></span><br><span class="line">yum install -y inotify-tools</span><br><span class="line"><span class="comment"># 2. 利用命令监控数据变化</span></span><br><span class="line">inotifywait <span class="comment"># 监控目录中数据变化</span></span><br><span class="line">inotifywatch <span class="comment"># 统计目录中数据变化的数量</span></span><br><span class="line"><span class="comment"># 3. 语法</span></span><br><span class="line">inotifywait [OPTIONS] 目录</span><br><span class="line"><span class="comment"># 4. 常见参数</span></span><br><span class="line"><span class="comment"># @&lt;file&gt;     → 等价于 exclude-from=xxx，排除操作(多个)</span></span><br><span class="line"><span class="comment"># --exclude   → 排除某个目录或文件</span></span><br><span class="line"><span class="comment"># --excludei  → 排除某个目录或文件(文件或目录名不区分大小写)</span></span><br><span class="line"><span class="comment"># -m          → 持续监控，无该参数时只监控到一次事件就会退出</span></span><br><span class="line"><span class="comment"># -r          → 递归监控，即监控指定目录的同时监控各级子目录及其文件</span></span><br><span class="line"><span class="comment"># -q          → 只显示事件变化信息(不显示提示等无关紧要的信息)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -qq         → 什么都不输出</span></span><br><span class="line"><span class="comment"># -format     → 设置监控信息输出的格式(-format &quot;%e %f %w %T&quot; → 分别代表事件、文件、目录、变化时间)</span></span><br><span class="line"><span class="comment"># -timefmt    → 设置时间格式</span></span><br><span class="line"><span class="comment"># -c          → 使用 csv 格式(标准列表信息输出格式)，使用逗号分隔</span></span><br><span class="line"><span class="comment"># -t          → 监控数据的超时时间(即只监控指定的时间，之后会停止监控)</span></span><br><span class="line"><span class="comment"># -e          → 指定监控的事件(create、delete、modify、move)，监控创建、修改、删除、移动、重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 事件</span></span><br><span class="line">access <span class="comment"># 文件或目录内容被读取时</span></span><br><span class="line">modify <span class="comment"># 文件或目录内容被写入时</span></span><br><span class="line">attrib <span class="comment"># 文件或目录属性被改变时</span></span><br><span class="line">close_write <span class="comment"># 文件或目录内容被关闭时(文件被改变了)</span></span><br><span class="line">close_nowrite <span class="comment"># 文件或目录内容关闭时(文件未改变)</span></span><br><span class="line">close <span class="comment"># 文件或目录内容被关闭</span></span><br><span class="line">open <span class="comment"># 文件或目录内容被打开</span></span><br><span class="line">moved_to <span class="comment"># 文件或目录从其他目录移入到监控目录</span></span><br><span class="line">moved_from <span class="comment"># 文件或目录从监控目录移出</span></span><br><span class="line">move <span class="comment"># 文件或目录移动</span></span><br><span class="line">create <span class="comment"># 创建文件或目录</span></span><br><span class="line">delete <span class="comment"># 删除文件或目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 监控目录数据信息变化：inotifywait -mrq --format &quot;%w%f&quot; -e &quot;modify,close_write,moved_to,moved_from,create,delete&quot; /backup</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="2-5-1-如何进行数据传输"><a href="#2-5-1-如何进行数据传输" class="headerlink" title="2.5.1 如何进行数据传输"></a>2.5.1 如何进行数据传输</h4><ol>
<li><p>利用脚本文件实现同步数据</p>
<figure class="highlight plain"><figcaption><span>sh</span></figcaption><table><tr><td class="code"><pre><span class="line"># 拓展：</span><br><span class="line"># \   → 可以将长的命令换行显示</span><br><span class="line"># while read 变量 → 实时读取输出信息的每一行</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=linus</span><br><span class="line"></span><br><span class="line">inotifywait -mrq --format <span class="string">&quot;%w%f&quot;</span> -e <span class="string">&quot;modify,close_write,moved_to,moved_from,create,delete&quot;</span> /backup\</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> inotify_data</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	rsync -az --delete /backup/ linus@172.16.1.41::backup</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>利用软件工具实现同步数据(sersync)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/wsgzao/sersync</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载：wget https://github.com/wsgzao/sersync/archive/master.zip</span></span><br><span class="line"><span class="comment"># unzip master.zip</span></span><br><span class="line"><span class="comment"># /usr/local/sersync</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置文件</p>
<img src="imgs/image-20201211120305716.png" alt="image-20201211120305716" style="zoom:67%;" />
</li>
<li><p>进程</p>
<ul>
<li>普通进程：执行完相应的任务即消失</li>
<li>守护进程：一直存在与进程中</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/12/12/04-linux-Linux%20%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="第四章-Linux-系统目录"><a href="#第四章-Linux-系统目录" class="headerlink" title="第四章 Linux 系统目录"></a>第四章 Linux 系统目录</h2><blockquote>
<p><strong>核心知识速记：</strong></p>
<ol>
<li>挂载<ol>
<li>概念：将一个空目录和存储设备文件建立关系 Linux 系统中存储设备不挂载无法正常使用</li>
<li>挂载命令：<code>mount /dev/sdb3 /oldboy</code></li>
<li>卸载命令：<code>umount /oldboy</code></li>
<li>查看磁盘与分区：<code>fdisk -l</code></li>
<li>查看挂载点：<code>df -h</code></li>
<li>意义：使磁盘设备可以进行数据存储；实现远程连接存储服务器</li>
</ol>
</li>
<li>根下的重要目录<ol>
<li><code>bin</code> → 命令文件；<code>sbin</code> → 管理员命令文件；<code>boot</code> → 系统启动引导文件；</li>
<li><code>dev</code> → 硬件设备信息文件；<code>etc</code> → 系统/服务配置文件；<code>home</code> → 家目录；</li>
<li><code>root</code> → 管理员用户家目录；<code>lib</code> → 库文件；<code>lib64</code> → 库文件；</li>
<li><code>mnt</code> → 临时挂载点；<code>opt</code>：第三方软件程序；<code>usr</code> → 第三方软件程序；</li>
<li><code>proc</code> → 系统内核(多用于系统优化，且该目录中的文件均存在于内存中)；</li>
<li><code>tmp</code> → 数据临时存储(回收站)；<code>var</code> → 日志文件</li>
</ol>
</li>
<li><code>/etc</code> 目录下重要文件<ol>
<li><code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> → 网卡配置文件</li>
<li><code>/etc/resolv.conf</code> → 域名解析配置文件</li>
<li><code>/etc/hosts</code> → 指定域名与 IP 地址的映射关系的配置文件</li>
<li><code>/etc/fstab</code> → 自动挂载配置文件</li>
<li><code>/etc/rc.local</code> → 开机自动运行命令配置文件(需要运行 chmod +x /etc/rc.d/rc.local 改写运行权限)</li>
<li><code>/etc/inittab</code> → CentOS6 系统运行级别配置文件</li>
<li><code>/etc/motd</code> → 登陆系统之后显示该文件中的内容</li>
<li><code>/etc/issue</code> → 登陆系统之前显示该文件中的内容</li>
<li><code>/etc/profile</code>、<code>/etc/bashrc</code>、<code>~/.bashrc</code>、<code>~/.bash_profile</code> → 可以配置变量与别名的文件</li>
</ol>
</li>
<li>两个系统安全服务<ol>
<li>防火墙服务(firewalld)：将不安全的数据流量进行隔离</li>
<li>selinux 服务：可以限制 root 用户的操作行为<ol>
<li><code>setenforce 0</code> ：临时关闭 selinux 服务</li>
<li><code>setenforce 1</code> ：临时开启 selinux 服务</li>
<li>getenforce ：查看 selinux 服务状态(enforcing → 激活启用；permissive → 输出警告信息代替开启；disabled → 关闭)</li>
<li><code>/etc/selinux/config</code> ：永久开启或者关闭 → <code>sed -i &#39;7s/enforcing/disabled/g&#39; /etc/selinux/config</code></li>
</ol>
</li>
</ol>
</li>
<li>使用单用户破解系统密码<ul>
<li>进入开机选择菜单界面，上下键切换停止读秒过程；</li>
<li>按 <code>e</code> 键 → 在 UTF-8 后输入 <code>init=/bin/sh</code> → <code>ctrl + x</code> → 进入单用户模式；</li>
<li>输入 <code>mount -o remount,rw /</code> → 在改密码之前，让根目录有读写权限；</li>
<li>输入 <code>passwd</code> → 输入新密码(两次)；</li>
<li>输入 <code>touch /.autorelabel</code> → 在根目录下创建一个隐藏文件；(记忆：<code>auto relabel</code> 自动重新标记)</li>
<li>输入 <code>exec /sbin/init</code> → 重启系统</li>
</ul>
</li>
<li>变量的应用： <code>data_info=$(date &quot;+%F&quot;)</code> → <code>$&#123;data_info&#125;</code></li>
<li>系统运行级别(0-6)<ol>
<li>0 - 6 的系统运行级别代表的意义</li>
<li>查看当前系统运行级别： <code>runlevel</code></li>
<li>临时修改运行级别： <code>init n</code></li>
<li>永久修改运行级别<ol>
<li>CentOS6： <code>/etc/inittab</code> → <code>id:3:initdefault</code></li>
<li>CentOS7： <code>systemctl get-default</code> → <code>ll /usr/lib/systemd/system/runlevel*target</code> → <code>systemctl set-default graphical.target</code></li>
</ol>
</li>
</ol>
</li>
<li>系统安装部署软件的四种方式：<code>yum</code>、<code>rpm</code>、<code>编译安装</code>、<code>二进制包安装</code></li>
<li>系统修改网卡名<ul>
<li>修改网卡文件中名称(两处，NAME 和 DEVICE)</li>
<li>修改网卡文件名称(使用 mv 命令重命名)：<code>mv ifcfg-ens33 ifcfg-eth0</code></li>
<li>修改系统加载网卡信息文件(<code>vi /etc/default/grub</code> → <code>GRUB_CMDLINE_LINUX=&quot;crashkernel=auto biosdevname=0 net.ifnames=0 rhgb quiet&quot;</code>)</li>
<li>执行命令加载 grub 文件配置信息：<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></li>
<li>重启系统：<code>shutdown -r now</code></li>
</ul>
</li>
<li>别名<ol>
<li>临时设置：<code>alias ifnet0=&#39;cat /etc/sysconfig/network-scripts/ifcfg-eth0&#39;</code></li>
<li>永久设置：<code>vim /etc/profile</code> → 新增 <code>alias ifnet0=&#39;cat /etc/sysconfig/network-scripts/ifcfg-eth0&#39;</code></li>
<li>查看系统所有别名：<code>alias</code></li>
<li>取消别名：<ul>
<li><code>unalias ifnet0</code> → 临时取消</li>
<li>使用绝对路径执行命令，例如 <code>/bin/cp /etc/hosts /tmp/</code></li>
<li>使用转义，例如 <code>\cp /etc/hosts /tmp/</code></li>
</ul>
</li>
</ol>
</li>
<li>转义符号：<code>\n</code>、<code>\r</code>、<code>\t</code> …</li>
<li><code>/var</code> 目录重要文件<ol>
<li><code>/var/log/messages</code> → 记录系统服务运行状况</li>
<li><code>/var/log/secure</code> → 登录系统的用户信息</li>
</ol>
</li>
<li><code>/proc</code> 目录重要文件<ol>
<li><code>/proc/cpuinfo</code> → 查看 CPU 硬件信息</li>
<li><code>/proc/meminfo</code> → 查看内存硬件信息</li>
<li><code>/proc/loadavg</code> → 查看系统负载情况</li>
<li><code>/proc/mounts</code> → 查看磁盘挂载情况</li>
</ol>
</li>
<li>文件属性组成部分概述：<code>inode</code>、<code>文件类型</code>、<code>文件权限</code>、<code>所属用户</code>、<code>所属组</code>、<code>文件大小</code>、<code>修改时间</code>、<code>路径</code></li>
<li>文件类型：普通文件(<code>f/-</code>)、目录文件(<code>d</code>)、链接文件(<code>l</code>)、设备文件(<code>c/b</code>)、套接字文件(<code>s</code>)、管道文件(<code>p</code>)</li>
<li>文件目录拓展命令：<code>which</code>、<code>whereis</code>、<code>locate</code>、<code>updatedb</code>、<code>find 查找路径 查找条件</code></li>
<li>PATH 环境变量</li>
</ol>
</blockquote>
<h3 id="4-1-目录挂载"><a href="#4-1-目录挂载" class="headerlink" title="4.1 目录挂载"></a>4.1 目录挂载</h3><h4 id="4-1-1-目录"><a href="#4-1-1-目录" class="headerlink" title="4.1.1 目录"></a>4.1.1 目录</h4><ol>
<li>作用：<ol>
<li>可以实现数据分类存储</li>
<li>可以实现挂载</li>
</ol>
</li>
<li>磁盘简单了解<ol>
<li>目录：<code>/dev/sda</code>，新增磁盘后： sdb、sdc…，可以通过 <code>ll /dev/sdb</code> 来查看新增磁盘是否识别(也可以使用 <code>fdisk -l</code>查看磁盘与分区情况)，识别光驱采用 <code>ll /dev/cdrom</code></li>
<li>分区之后，分为<code>/dev/sda1</code>、<code>/dev/sda2</code>…</li>
<li>sda、sda1、sda2 都存放在 /dev 目录下</li>
</ol>
</li>
<li>挂载：<ol>
<li>理解：将一个空目录和存储设备文件建立关系</li>
<li>让目录和磁盘分区建立关系的过程，就是挂载的过程，这个过程中的目录被称为挂载点</li>
<li>可以使用 <code>df -h</code> 查看挂载点</li>
<li>新磁盘分区设置挂载点：<code>mount /dev/sdb3 /oldboy</code> → oldboy 为挂载点(一般新建一个空目录作为挂载点) → 访问/oldboy 相当于访问磁盘 sdb 的第三个分区</li>
<li>卸载(取消挂载)：<code>umount /oldboy</code>，即解除设备文件与目录之间的关系</li>
<li>意义：<ol>
<li>可以在系统添加新的磁盘设备后，进行数据存储</li>
<li>可以实现连接远程存储服务器</li>
</ol>
</li>
<li>总结：Linux 系统中所有的存储设备都需要挂载之后才可以使用</li>
</ol>
</li>
</ol>
<h3 id="4-2-重要目录"><a href="#4-2-重要目录" class="headerlink" title="4.2 重要目录"></a>4.2 重要目录</h3><h4 id="4-2-1-下的一些重要目录简单介绍"><a href="#4-2-1-下的一些重要目录简单介绍" class="headerlink" title="4.2.1 / 下的一些重要目录简单介绍"></a>4.2.1 / 下的一些重要目录简单介绍</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── bin -&gt; usr/bin     # 存放系统命令文件(二进制文件)目录，binary；-&gt; 表示快捷方式，即 /bin(快捷) ↔ /usr/bin，在Linux中称 /bin 是 /usr.bin 目录的软链接</span><br><span class="line">├── sbin -&gt; usr/sbin     # 存放系统命令文件(二进制文件)目录，super binary，此目录中的大部分命令只能管理员使用</span><br><span class="line">├── boot     # 存放系统启动引导文件信息(拓展：Cobbler自动化部署-网络安装linux系统)</span><br><span class="line">├── dev     # device，存放系统硬件设备文件信息</span><br><span class="line">├── etc     # 存放系统或服务的配置文件信息(重点)</span><br><span class="line">├── home     # 存放用户家目录信息，(root管理员的家目录为/root)</span><br><span class="line">├── root     # 存放管理员家目录信息</span><br><span class="line">├── lib -&gt; usr/lib     # 系统或软件服务程序库文件存储目录 32bit(32bit识别内存容量最大为4G)</span><br><span class="line">├── lib64 -&gt; usr/lib64     # 系统或软件服务程序库文件存储目录 64bit(64bit识别内存容量最大为256G?)</span><br><span class="line">├── media</span><br><span class="line">├── mnt     # 临时挂载点目录</span><br><span class="line">├── opt     # 存储第三方软件程序(相当于Windows的Program目录)</span><br><span class="line">├── usr     # 存储第三方软件程序(相当于Windows的Program目录)</span><br><span class="line">├── proc     # 存储系统硬件信息/内核配置信息(优化系统)，此目录中存储的数据都在内存中</span><br><span class="line">├── run</span><br><span class="line">├── srv</span><br><span class="line">├── sys</span><br><span class="line">├── tmp     # 用于数据临时存储(类似Windows系统回收站)，可以将待删数据暂时mv到该目录，而不是直接rm</span><br><span class="line">└── var     # variable，存储可变的文件数据(日志文件)</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-usr-local-目录"><a href="#4-2-2-usr-local-目录" class="headerlink" title="4.2.2 /usr/local 目录"></a>4.2.2 /usr/local 目录</h4><ol>
<li>该目录用于存放安装第三方软件程序数据</li>
<li>系统安装部署软件方式(四种)<ol>
<li>yum<ol>
<li>优点：可以解决软件的依赖关系</li>
<li>缺点：无法实现定制化安装</li>
</ol>
</li>
<li>rpm<ol>
<li>优点：无需依赖网络安装软件</li>
<li>缺点：无法解决软件依赖</li>
<li>安装方式：<code>rpm -ivh mysql.rpm</code> → i 即 install，v 即 verbose(详细过程)，h 即 hash(哈希信息)</li>
</ol>
</li>
<li>编译安装软件<ol>
<li>优点：可以实现定制化安装</li>
<li>缺点：无法解决软件依赖</li>
<li>安装前提：需要有编译软件源码包</li>
<li>安装过程(以 Nginx 为例)：<ul>
<li>配置过程：<code>./configure --prefix=/application --with-http_ssl_module </code><ul>
<li><code>./configure --prefix=path</code> → <code>--prefix=path</code> 代表安装路径(可以自动创建目录)</li>
<li><code>--with-xxx</code> → 代表软件可以支持的功能</li>
<li><code>--without-xxx</code> → 取消软件的某个默认功能</li>
<li>此过程需要进行 check，要解决一些依赖(使用 yum)</li>
</ul>
</li>
<li>编译过程：<code>make</code> → 让系统识别源码信息</li>
<li>安装过程：<code>make install</code></li>
</ul>
</li>
</ol>
</li>
<li>二进制包方式安装软件(绿色软件/硬盘版软件)<ol>
<li>优点：节省软件安装过程</li>
<li>缺点：无法解决软件依赖</li>
<li>安装前提：需要有二进制包</li>
<li>安装过程：进行解压 → 将解压后的目录保存到指定系统目录下即可直接使用</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="4-3-重要文件"><a href="#4-3-重要文件" class="headerlink" title="4.3 重要文件"></a>4.3 重要文件</h3><h4 id="4-3-1-etc-目录"><a href="#4-3-1-etc-目录" class="headerlink" title="4.3.1 /etc 目录"></a>4.3.1 /etc 目录</h4><ol>
<li><p>网卡文件</p>
<ol>
<li>路径：<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></li>
<li>配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet     # 设置网络类型(此处为以太网)</span><br><span class="line">BOOTPROTO=none     # 是否自动获取IP地址(none/static → IP地址需要手工设置；DHCP → IP地址自动获取)</span><br><span class="line">DEFROUTE=yes     # 是否激活静态默认路由条目(没有等价于禁止主机访问外网)</span><br><span class="line">NAME=eth0     # 网卡名</span><br><span class="line">UUID=8a78ec39-2d36-4316-8787-776f666f8bcf     # 硬件标识信息</span><br><span class="line">DEVICE=eth0     # 网卡名</span><br><span class="line">ONBOOT=yes     # 是否激活网卡</span><br><span class="line">IPADDR=10.0.0.200     # IP 地址</span><br><span class="line">PREFIX=24     # 子网掩码</span><br><span class="line">GATEWAY=10.0.0.254     # 网关</span><br><span class="line">DNS1=223.5.5.5     # DNS</span><br></pre></td></tr></table></figure></li>
<li>系统修改网卡名<ol>
<li>修改网卡文件中名称(两处，NAME 和 DEVICE)</li>
<li>修改网卡文件名称(使用 mv 命令重命名)：<code>mv ifcfg-ens33 ifcfg-eth0</code></li>
<li>修改系统加载网卡信息文件(<code>vi /etc/default/grub</code> → <code>GRUB_CMDLINE_LINUX=&quot;crashkernel=auto biosdevname=0 net.ifnames=0 rhgb quiet&quot;</code>)</li>
<li>执行命令加载 grub 文件配置信息：<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></li>
<li>重启系统：<code>shutdown -r now</code></li>
</ol>
</li>
</ol>
</li>
<li><p>域名解析配置文件</p>
<ol>
<li>路径：<code>/etc/resolv.conf</code></li>
<li>配置文件：<code>nameserver 223.5.5.5</code></li>
<li>作用：影响域名的解析</li>
</ol>
</li>
<li><p>指定域名与 IP 地址的映射关系</p>
<ol>
<li>路径：<code>/etc/hosts</code></li>
<li>配置文件：<code>ipadress domainName</code></li>
<li>拓展：<blockquote>
<ol>
<li>系统安全服务：<ol>
<li>防火墙服务(firewalld)：将不安全的数据流量进行隔离<ul>
<li><code>systemctl is-active firewalld</code></li>
<li><code>systemctl disable firewalld</code></li>
<li><code>systemctl enable firewalld</code></li>
<li><code>systemctl is-enabled firewalld</code></li>
</ul>
</li>
<li>selinux 服务：可以限制 root 用户的操作行为<ul>
<li><code>setenforce 0</code>：临时关闭 selinux 服务</li>
<li><code>setenforce 1</code>：临时开启 selinux 服务</li>
<li><code>getenforce</code>：查看 selinux 服务状态(enforcing → 激活启用；permissive → 输出警告信息代替开启；disabled → 关闭)</li>
<li><code>/etc/selinux/config</code>：永久开启或者关闭 → <code>sed -i &#39;7s/enforcing/disabled/g&#39; /etc/selinux/config</code></li>
</ul>
</li>
</ol>
</li>
<li>在配置文件中加#将其注释会将其配置为默认配置(不一定是将其关闭)</li>
</ol>
</blockquote>
</li>
</ol>
</li>
<li><p>实现自动挂载功能文件</p>
<ol>
<li><p>路径：<code>/etc/fstab</code></p>
</li>
<li><p>配置文件：</p>
<img src="oldboy_linux-img/image-20201117145642246.png" alt="image-20201117145642246" style="zoom: 67%;" />
</li>
<li><p>说明：</p>
<ol>
<li>数据自动保存机制不建议开启，容易造成磁盘空间浪费</li>
<li>磁盘自检机制不建议开启，会造成磁盘损耗</li>
</ol>
</li>
<li><p>拓展：</p>
<blockquote>
<ol>
<li>文件系统类型：即数据存储到磁盘的方式</li>
<li>NTFS(Windows) → 可以存储任意容量的数据</li>
<li>FAT32(Windows) → 只可以存储小于 4G 的单个文件</li>
<li>xfs(Linux) → 推荐，效率较高</li>
<li>ext3(Linux) → 保证数据安全性，但效率过低</li>
</ol>
</blockquote>
</li>
</ol>
</li>
<li><p>开机自动执行命令</p>
<ol>
<li>路径：<code>/etc/rc.local</code></li>
<li>配置文件：<code>touch /var/lock/subsys/local</code> 要使其此文件生效，需要运行 <code>chmod +x /etc/rc.d/rc.local</code> 改写权限(添加执行权限)</li>
<li>变量的应用：<code>data_info=$(date &quot;+%F&quot;)</code> → <code>$&#123;data_info&#125;</code></li>
</ol>
</li>
<li><p>系统运行级别配置文件</p>
<ol>
<li>系统运行级别(即系统启动后，会加载什么服务)<ol>
<li><code>0</code>：关机级别</li>
<li><code>1</code>：系统正常启动，不会运行网络服务，单用户级别，用于修复系统/破解系统密码</li>
<li><code>2</code>：多用户级别，不支持网络服务</li>
<li><code>3</code>：多用户级别，支持网络服务</li>
<li><code>4</code>：预留未设置</li>
<li><code>5</code>：进入图形界面(X11)</li>
<li><code>6</code>：重启级别</li>
</ol>
</li>
<li>查看当前系统运行级别：<code>runlevel</code></li>
<li>临时修改运行级别：<code>init n</code></li>
<li>永久修改运行级别：<ol>
<li>CentOS6：<code>/etc/inittab</code> → <code>id:3:initdefault</code></li>
<li>CentOS7：<code>systemctl get-default</code> → <code>ll /usr/lib/systemd/system/runlevel*target</code> → <code>systemctl set-default graphical.target</code></li>
</ol>
</li>
<li>使用单用户破解系统密码<ol>
<li>进入开机选择菜单界面，上下键切换停止读秒过程；</li>
<li>按 e 键 → 在 UTF-8 后输入 <code>init=/bin/sh</code> → ctrl + x → 进入单用户模式；</li>
<li>输入 <code>mount -o remount,rw /</code> → 在改密码之前，让根目录有读写权限；</li>
<li>输入 <code>passwd</code> → 输入新密码(两次)；</li>
<li>输入 <code>touch /.autorelabel</code> → 在根目录下创建一个隐藏文件；(记忆：auto relabel 自动重新标记)</li>
<li>输入 <code>exec /sbin/init</code> → 重启系统</li>
</ol>
</li>
</ol>
</li>
<li><p>系统显示输出文件</p>
<ol>
<li>路径：<code>/etc/motd</code></li>
<li>作用：登陆系统之后显示该文件中的内容</li>
</ol>
</li>
<li><p>系统显示输出文件</p>
<ol>
<li>路径：<code>/etc/issue</code></li>
<li>作用：登陆系统之前显示该文件中的内容</li>
</ol>
</li>
<li><p>可以配置变量与别名的文件</p>
<ol>
<li><p> 路径：<code>/etc/profile</code>、<code>/etc/bashrc</code>、<code>~/.bashrc</code>、<code>~/.bash_profile</code></p>
</li>
<li><p> 在这几个文件中设置变量之后，可以使变量永久生效</p>
</li>
<li><p>以上文件设置变量后，如何使变量生效?</p>
<ul>
<li>重新进行远程连接</li>
<li><code>source /etc/profile</code> 或者 <code>. /etc/profile</code>→ 重新加载 <code>/etc/profile</code> 文件，<code>source ↔ .</code></li>
</ul>
</li>
<li><p> <code>/etc/profile</code>、<code>/etc/bashrc</code> 配置变量之后全局生效，即系统中所有用户都可以识别</p>
</li>
<li><p> <code>~/.bashrc</code>、<code>~/.bash_profile</code> 配置变量之后局部生效，只有指定用户可以识别</p>
</li>
<li><p>别名</p>
<ul>
<li>意义：可以让复杂命令简单化</li>
<li>临时设置：<code>alias ifnet0=&#39;cat /etc/sysconfig/network-scripts/ifcfg-eth0&#39;</code></li>
<li>永久设置：<code>vim /etc/profile</code> → 新增 <code>alias ifnet0=&#39;cat /etc/sysconfig/network-scripts/ifcfg-eth0&#39;</code></li>
<li>查看系统所有别名：<code>alias</code></li>
<li>取消别名：<ol>
<li><code>unalias ifnet0</code> → 临时取消</li>
<li>使用绝对路径执行命令，例如 <code>/bin/cp /etc/hosts /tmp/</code></li>
<li>使用转义，例如 <code>\cp /etc/hosts /tmp/</code></li>
</ol>
</li>
<li>注意：别名名称尽量不要和已有命令名称冲突</li>
<li>练习：设置 rm 为移动到 tmp 目录中 → <code>alias rm=&#39;mv -t /tmp&#39;</code> → 放入 <code>/etc/profile</code> 中 → 检查是否有用户局部变量设置</li>
<li>局部设置优先于全局设置</li>
<li>拓展：清空某个目录的命令：<code>rm -fr /tmp/*</code> → 清空 <code>/tmp</code> 目录中的所有数据</li>
</ul>
</li>
<li><p>转义符号：<code>\</code></p>
<ul>
<li><code>\n</code>：换行</li>
<li><code>\r</code>：遇到\r 光标会回到行首，按位将\r 后面的内容重新对之前的内容进行替换(类似于 insert 模式)</li>
<li><code>\t</code>：Tab 键</li>
<li><code>echo -e &quot;hello\nlinux&quot;</code> → <code>-e</code> 参数表示 escape character，即识别字符串中的特殊转义字符</li>
<li><code>\r</code> 实践理解<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@aliyun ~]# echo -e &#39;abcd\ref&#39;</span><br><span class="line">efcd</span><br><span class="line">[root@aliyun ~]# echo -e &#39;abcd\ref\rg&#39;</span><br><span class="line">gfcd</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><p>拓展：隐藏文件如何删除：<code>rm -rf /.x*</code> → 目录中存在<code>.</code>和<code>..</code>，不建议使用<code>.*</code>的方式匹配删除</p>
</li>
<li><p>拓展：<code>pwd | xargs cp /etc/hosts</code> → 将 <code>/etc/hosts</code> 文件复制到当前目录</p>
</li>
</ol>
<h4 id="4-3-2-var-目录"><a href="#4-3-2-var-目录" class="headerlink" title="4.3.2 /var 目录"></a>4.3.2 /var 目录</h4><ol>
<li><code>/var/log/messages</code><ol>
<li>作用：可以记录系统服务运行状况</li>
<li>查看日志信息：<ol>
<li>使用 grep 根据关键字过滤查看：<code>grep -Ei &quot;error|fails|invalid&quot; /var/log/messages</code> → i 代表忽略大小写；E 代表同时过滤多个信息</li>
<li>使用 grep 根据时间过滤查看：<code>grep -B 1 -Ei &quot;22:.*(error|fails|invalid)&quot; /var/log/messages</code> → B 即 before，显示错误以及前 n 行；-A 即 after，显示错误以及后 n 行；()表示作为一个整体进行匹配；-C 即 center，显示错误以及上下 n 行</li>
<li><code>grep -r linus /root/*</code>：在指定目录遍历所有文件查找指定内容，-r 表示遍历/递归</li>
<li><code>tail -f /var/log/messages</code>：实时追踪查看日志变化</li>
</ol>
</li>
</ol>
</li>
<li><code>/var/log/secure</code><ol>
<li>作用：登录系统的用户信息</li>
<li><code>grep -c &quot;Failed password .* root&quot; /var/log/secure</code>：-c 表示返回匹配条目的数量，此命令可用于监控防止暴力破解 root 用户的密码</li>
</ol>
</li>
</ol>
<h4 id="4-3-3-proc-目录"><a href="#4-3-3-proc-目录" class="headerlink" title="4.3.3 /proc 目录"></a>4.3.3 /proc 目录</h4><ol>
<li><code>/proc/cpuinfo</code><ol>
<li>作用：查看 CPU 硬件信息</li>
<li>一些参数：<ol>
<li><code>physical id : 0</code>：CPU 颗数(使用 <code>grep -c &quot;physical id&quot; /proc/cpuinfo</code> 查看服务器有几颗 CPU，需要确认 id 不能相同)</li>
<li><code>processor : 0</code>：CPU 核心数(使用 <code>grep -c &quot;processor&quot; /proc/cpuinfo</code> 查看 CPU 的核心数)</li>
<li><code>model name : Intel(R) Core(TM) i7-4710MQ CPU @ 2.50GHz</code>：CPU 型号</li>
</ol>
</li>
</ol>
</li>
<li><code>/proc/meminfo</code><ol>
<li>作用：查看内存硬件信息</li>
<li>参数：<ol>
<li><code>MemTotal: 1863224 kB</code> → 总内存</li>
<li><code>MemFree: 1613452 kB</code> → 空闲内存(理解：空闲的可能是已存在的进程预留的内存，预占有，其他人不能使用)</li>
<li><code>MemAvailable: 1598068 kB</code> → 可用内存</li>
<li><code>Buffers: 2092 kB</code> → 缓冲区大小</li>
<li><code>Cached: 104984 kB</code> → 缓存区大小</li>
<li><code>SwapCached: 0 kB</code> → 占用的交换分区大小</li>
</ol>
</li>
</ol>
</li>
<li><code>/proc/loadavg</code><ol>
<li>作用：查看系统负载情况</li>
<li>参数：<code>0.00 0.01 0.05 1/107 7965</code>：前三个数分别代表每分钟平均负载、每 5 分钟平均负载、每 15 分钟平均负载</li>
<li>说明：负载值尽量控制在 &lt; 服务器总核心数</li>
</ol>
</li>
<li><code>/proc/mounts</code>：查看磁盘挂载情况</li>
</ol>
<h3 id="4-4-文件属性"><a href="#4-4-文件属性" class="headerlink" title="4.4 文件属性"></a>4.4 文件属性</h3><h4 id="4-4-1-文件属性组成部分概述"><a href="#4-4-1-文件属性组成部分概述" class="headerlink" title="4.4.1 文件属性组成部分概述"></a>4.4.1 文件属性组成部分概述</h4><ol>
<li><code>ll -i /etc/hosts</code> → <code>67141329 -rw-r--r--. 1 root root 208 Nov 17 10:24 /etc/hosts</code> → ls 的 <code>-i</code> 参数表示显示 inode</li>
<li><code>67141329</code>：文件属性中的 inode，即 index node ，索引节点，目的是可以更快地定位数据的存储位置</li>
<li><code>-</code>：文件类型信息(<code>-</code> → 普通文件；<code>d</code> → 目录文件；<code>l</code> → 软链接文件)</li>
<li><code>rw-r--r--.</code>：文件权限，每三个为一组(<code>r</code> → 可读；<code>w</code> → 可写；<code>x</code> → 可执行；<code>-</code> → 没有权限)<ol>
<li>系统数据权限赋予给三个人</li>
<li>文件拥有者(属主)、文件拥有用户组(属组)、文件其他用户</li>
</ol>
</li>
<li>在文件权限位后面，附加有一个单字符，用来表示是否有一个可替换的访问控制措施应用在这个文件上例如访问控制列表(ACL，access control list)<ol>
<li>开启了 SELinux 功能的 Linux 系统才会有这个点，点表示此文件带有”SELinux 的安全上下文”</li>
<li>CentOS7 默认是开启 SELinux 的</li>
<li>当文件权限位后面附加的是一个空格时，表示系统没有可替换的访问控制措施；当是一个可打印字符时，表示系统存在这样一个访问控制措施</li>
<li>GNU 的 ls 命令使用<code>.</code>字符表示文件使用了 SELinux 安全上下文，但是没有使用其他的访问控制措施</li>
<li>一个文件结合了其他访问控制措施，文件用<code>+</code>字符标记 (如：ACL)</li>
<li>总结：没有访问控制措施就没有可打印的单字符；有<code>.</code>表示此文件使用了 SELinux 安全上下文；使用<code>+</code>表示此文件使用了 ACL(不管有没有使用 SELinux 安全上下文)</li>
</ol>
</li>
<li><code>1</code>：文件硬链接数</li>
<li><code>root</code>：文件所属用户信息</li>
<li><code>root</code>：文件所属组用户信息</li>
<li><code>208</code>：文件大小</li>
<li><code>Nov 17 10:24</code>：文件修改时间</li>
</ol>
<h4 id="4-4-2-文件类型介绍"><a href="#4-4-2-文件类型介绍" class="headerlink" title="4.4.2 文件类型介绍"></a>4.4.2 文件类型介绍</h4><ol>
<li>Linux 中，扩展名不代表文件类型<ol>
<li>查看文件类型：<code>file /etc/hosts</code> → <code>/etc/hosts: ASCII text</code></li>
<li>文件类型不会随文件扩展名改变，扩展名仅作为提示使用</li>
</ol>
</li>
<li>分类：普通文件、目录文件、链接文件、设备文件、套接字文件、管道文件</li>
<li>普通文件：<ol>
<li>用 <code>f</code> 或者 <code>-</code> 来表示</li>
<li>分为纯文本文件、二进制文件、数据型文件(压缩)</li>
<li>识别 shell 脚本：在首行添加 <code>#!/bin/bash</code></li>
</ol>
</li>
<li>目录文件：<ol>
<li>用 <code>d</code> 表示</li>
<li>统计 <code>/etc</code> 下目录的数量：<code>ll /etc | grep -c &#39;^d&#39;</code></li>
</ol>
</li>
<li>链接文件：用 <code>l</code> 表示</li>
<li>设备文件：<ol>
<li><code>c</code> → 字符设备文件，代表性的一个文件 <code>ll /dev/random</code> → 会源源不断地产生字符流</li>
<li><code>b</code> → 块文件，存储数据用的</li>
</ol>
</li>
<li>套接字文件：用 <code>s</code> 表示</li>
<li>管道文件：用 <code>p</code> 表示</li>
</ol>
<h4 id="4-4-3-文件目录相关命令"><a href="#4-4-3-文件目录相关命令" class="headerlink" title="4.4.3 文件目录相关命令"></a>4.4.3 文件目录相关命令</h4><ol>
<li><p>显示命令文件绝对路径：<code>which timedatectl</code> → 仅在 PATH 环境变量中存在的路径中进行搜索</p>
</li>
<li><p>显示命令文件绝对路径和说明文档路径：<code>whereis timedatectl</code> → <code>timedatectl: /usr/bin/timedatectl /usr/share/man/man1/timedatectl.1.gz</code> → <code>man</code> 命令执行原理就是找到说明文档解压后显示的</p>
</li>
<li><p>快速定位文件路径：<code>locate a.txt</code></p>
<ol>
<li>需要先安装：<code>yum install -y mlocate</code>，执行 <code>updatedb</code> → 遍历整个系统的数据信息，生成数据库</li>
<li>原理：在 <code>/var/lib/mlocate/mlocate.db</code> 中查找</li>
<li>使用：每次使用前先更新一下数据库</li>
<li>缺点：不能进行模糊查询；需要定期更新数据库</li>
</ol>
</li>
<li><p>快速查找数据：<code>find 查找路径 查找条件</code></p>
<ol>
<li>按照名称查找：<code>find /opt -name &quot;a.txt&quot;</code> → <code>-name</code> 代表名称，可以模糊查询、<code>find /opt -iname &quot;*.txt&quot;</code> → <code>i</code> 代表忽略大小写</li>
<li>按照类型查找：<code>find /etc -type d | wc -l</code> → 默认递归查找，<code>-type</code> 代表文件类型，<code>wc -l </code> → 按行统计个数</li>
<li>按照目录层级查找：<ol>
<li><code>find /etc -maxdepth 1 -type d | wc -l</code> → 本身为第一层，即此命令为查找 /etc 目录下的目录数量(仅一层)，指定的是结束层</li>
<li><code>find /etc -mindepth 1 -type d | wc -l</code> → 本身为第一层，即此命令为查找 /etc 目录下的目录数量(从第一层到最底层)，指定的是开始层</li>
<li>按照大小查找：</li>
<li><code>find /etc -size -700k</code>：查找小于 700kb 的数据</li>
<li><code>find /etc -size +700k</code>：查找大于 700kb 的数据</li>
<li><code>find /etc -size 700k</code>： 查找等于 700kb 的数据</li>
<li>单位：<code>c、k、M、G</code> → <code>bytes、kb、MB、GB</code></li>
</ol>
</li>
<li>按照时间查找：<ol>
<li><code>date -s &quot;2020-01-01&quot;</code> → <code>-s</code> 代表设置由字符串描述的时间</li>
<li><code>find /etc -mtime -60</code>：查找 60 天以内的数据</li>
<li><code>find /etc -mtime +60</code>：查找 60 天以前的数据</li>
<li><code>find /etc -mtime 60</code>： 查找距离当前时间 60 天的数据(精确到秒，几乎不用)</li>
</ol>
</li>
</ol>
</li>
<li><p>显示目录层级信息：</p>
<ol>
<li>命令：<code>tree -L 1 etc</code> → 显示指定层级的目录结构信息</li>
<li>命令：<code>tree -d /etc</code> → 只查看目录</li>
</ol>
</li>
<li><p>压缩打包</p>
<ol>
<li>tar 命令<ol>
<li>查看目录大小：<ul>
<li>在Linux中目录文件的大小为目录的大小，并非是目录中文件数据大小的总和。</li>
<li><code>du -sh /var</code> → <code>-s</code>代表summary，总结。此命令为查看目录 /var 中所有数据的大小总和。</li>
</ul>
</li>
<li>压缩数据：<ul>
<li>格式：<code>tar zcvf 压缩包路径及压缩包名 待压缩的数据文件1 待压缩的数据文件2</code></li>
<li>实践：<code>tar zcvf ./oldboy.tar.gz ./etc/ ./oldboy.txt</code> → 在当前目录将 etc 目录和 oldboy.txt 文件打包到 oldboy.tar.gz 中</li>
<li>不同的格式，压缩比与压缩率不同</li>
<li>参数说明<ul>
<li><code>z</code> 表示采用 gzip 方式进行压缩</li>
<li><code>c</code> 表示创建一个压缩包</li>
<li><code>v</code> 表示显示数据压缩过程</li>
<li><code>f</code> 表示识别压缩包信息及路径信息</li>
</ul>
</li>
<li>使用绝对路径与相对路径的一点不同：<ul>
<li>如果采用绝对路径，压缩时会默认将根目录信息移除。目的是为了避免解压后数据覆盖原有目录中的数据</li>
<li>加上参数 <code>P</code> 可以保留根目录信息，可以用于从压缩包中恢复丢失或者错误的数据</li>
</ul>
</li>
<li>压缩时排除某个数据：<code>tar zvcf /oldboy/oldboy.tar.gz /oldboy/ --exclude=/oldboy/oldboy01.txt</code> → 对 /oldboy 整个目录进行压缩，但是排除掉其中的 oldboy01.txt 文件</li>
<li>压缩时排除多个数据：先在该目录创建一个文件 <code>vi paichu.txt</code>，将待删除的部分写入到该文件中 → <code>tar zvcf /oldboy/oldboy.tar.gz --exculde-from=/oldboy/paichu.txt</code></li>
</ul>
</li>
<li>解压数据：<code>tar zvxf ./oldboy.tar.gz</code> → 不指定路径默认解压到当前路径下，可以使用 <code>-C 路径</code> 来指定解压路径</li>
<li>查看压缩包数据：<code>tar tf /oldboy/oldboy.tar.gz</code> → <code>t</code> 代表列表显示压缩包数据，不会解压</li>
</ol>
</li>
</ol>
</li>
<li><p>拓展：find 的其他用法</p>
<ol>
<li><p>按照分钟查找数据信息</p>
<ol>
<li>企业应用场景：启动服务时报错，日志文件必定有改动，当不知道日志文件的路径时，可以依照此方法找到日志文件</li>
<li><code>find /oldboy -mmin -2</code>：查找两分钟以内有变动的数据</li>
<li><code>find /oldboy -mmin +2</code>：查找两分钟以前有变动的数据</li>
</ol>
</li>
<li><p>如何查找多个条件的数据：</p>
<ol>
<li><code>find /oldboy -type d -a -name &quot;oldboy*&quot;</code> → <code>-a</code> 是 and 的意思，可以省略(即默认不写就是 and)</li>
<li><code>find /oldboy -type d -o -name &quot;oldboy*&quot;</code> → <code>-o</code> 是 or 的意思，不可以省略</li>
</ol>
</li>
<li><p>如何排除指定目录不做查找：</p>
<ol>
<li><p><code>find /oldboy -path &quot;oldboy/01/*&quot; -type f</code> → 只在指定路径进行查找，<code>-path</code> 参数表示指定目录</p>
</li>
<li><p><code>find /oldboy ! -path &quot;oldboy/01/*&quot; -type f</code> → 在指定路径外进行查找</p>
</li>
<li><p><code>find /oldboy -path &quot;oldboy/01&quot; -prune -o -type f -print</code> → 在指定目录外进行查找</p>
<ol>
<li><p><code>-print</code> 代表仅对前面命令匹配到的内容进行输出</p>
</li>
<li><p><code>-prune</code></p>
<ul>
<li>单词原义为修剪，引申为排除</li>
<li>find 的表达式是由 options、tests 和 actions 组成的，其中 options 总是返回 true，而 tests 和 actions 返回的结果为 true 或者 false</li>
<li>options、tests 和 actions 之间需要用 operators(这里指逻辑操作符 -and、-or …) 来连接，默认的 operators 为 -a，所以在执行没有明确指明 operator 的 find 命令时，默认是多个条件均满足才会被匹配</li>
<li><code>-prune</code> 参数属于 find 的 action，且返回的结果为 true；如果被查找的数据是一个目录，那么 find 则不会递归到该目录里做进一步的查找，即 <code>-prune</code> 匹配的是一个目录时，会跳过该目录，不对该目录的子目录及其文件进行匹配查询</li>
<li><code>-prune</code> 如果配合 <code>-depth</code> 参数使用，则该 action 返回 false；因为 <code>-delete</code>这个 action 总是和 <code>-depth</code> 一起使用，所以不能把 <code>-prune</code> 和 <code>-delete</code> 这两个 action 一起使用</li>
<li><code>-prune</code> 参数经常用来排除目录不做查找操作</li>
<li><code>-path</code> 后的路径不能以<code>/</code>结尾 → 硬性规定</li>
</ul>
</li>
<li><p>实践：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tree /oldboy/</span><br><span class="line">==========================================</span><br><span class="line">输出：</span><br><span class="line">/oldboy/</span><br><span class="line">├── 01</span><br><span class="line">│   └── linus</span><br><span class="line">├── 02</span><br><span class="line">│   └── linus</span><br><span class="line">└── 03</span><br><span class="line">    └── linus</span><br><span class="line"></span><br><span class="line">3 directories, 3 files</span><br><span class="line">==========================================</span><br><span class="line">find /oldboy/ -path /oldboy/01     # 输出：/oldboy/01</span><br><span class="line">find /oldboy/ -path /oldboy/01 -prune     # 输出：/oldboy/01</span><br><span class="line">find /oldboy/ -path /oldboy/01 -prune -o -type f</span><br><span class="line">==========================================</span><br><span class="line">输出：</span><br><span class="line">/oldboy/01</span><br><span class="line">/oldboy/02/linus</span><br><span class="line">/oldboy/03/linus</span><br><span class="line">==========================================</span><br><span class="line">find /oldboy/ -path /oldboy/01 -prune -print -o -type f     # 输出：/oldboy/01</span><br><span class="line">find /oldboy/ -path /oldboy/01 -prune -o -type f -print</span><br><span class="line">==========================================</span><br><span class="line">输出：</span><br><span class="line">/oldboy/02/linus</span><br><span class="line">/oldboy/03/linus</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>拓展：删除一个目录中的部分文件：</p>
<ol>
<li><code>find /oldboy -mindepth 1 ! -name &quot;*.tar.gz&quot; | xargs rm -rf</code> → 删除 /oldboy 目录下除了 <code>*.tar.gz</code> 的所有数据；<code>-mindepth 1</code> 是为了排除当前目录；<code>xargs</code> 会将管道符前面执行的数据保存，最后作为一个整体参数放到管道符后的命令的最后进行识别处理；<code>xargs</code> 本身的含义是将一些数据信息分组显示，例如 <code>echo &#123;1..15&#125; | xargs -n 2</code></li>
<li><code>find /oldboy -mindepth 1 ! -name &quot;*.tar.gz -delete&quot;</code> 同上</li>
<li><code>find /oldboy -mindepth 1 ! -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;</code> 同上；<code>-exec</code> 的作用是将前面find的结果分多次放到后面的<code>&#123;&#125;</code>里面；两个命令一次执行需要用到<code>;</code>；注意在进行批量压缩时不能使用 -exec 的方式进行，这样相当于多次执行压缩命令，目标压缩文件会被多次覆盖，最后目标压缩文件中仅保留最后一次被压缩的文件。</li>
<li>对<code>mindepth</code> 和 <code>maxdepth</code> 的理解：<code>mindepth 1</code> 即从当前路径出发，最少向下前进一层，所以查询的范围为当前目录的子目录及其以下路径，不包括当前路径；<code>maxdepth 1</code> 即最大的查询范围为当前路径的下一层，包括了当前路径以及当前路径的下一层</li>
</ol>
</li>
<li><p>拓展：PATH 环境变量</p>
<ol>
<li>指定命令文件保存的路径</li>
<li>临时添加路径：<code>PATH=&quot;$PATH:/usr/local&quot;</code>、<code>PATH=&quot;$PATH:$(pwd)&quot;</code></li>
</ol>
</li>
<li><p>拓展：<code>yum provides locate</code> → 查找 locate 命令所在的软件包名，也可以使用 <code>yum search locate</code></p>
</li>
<li><p>拓展：<code>wc -l /etc/hosts</code> → 按行统计个数，即返回有多少行</p>
</li>
<li><p>拓展：<code>yum erase mysql</code> → 卸载软件及其依赖(慎用)</p>
</li>
</ol>
<h4 id="4-4-4-文件用户"><a href="#4-4-4-文件用户" class="headerlink" title="4.4.4 文件用户"></a>4.4.4 文件用户</h4><ol>
<li>用户基本概念<ol>
<li>用户：作用是管理相应的数据和进程</li>
<li>用户组：对组设置权限相当于对组内的所有用户设置权限</li>
<li>系统识别用户使用 ID 进行识别，可以使用 <code>id root</code> 命令查看 id <ol>
<li>UID，即 user id ，用户编号</li>
<li>GID，即 group id，用户组编号</li>
</ol>
</li>
</ol>
</li>
<li>系统用户的分类<ol>
<li>系统管理员：root，编号是 0，对系统具有绝对控制</li>
<li>系统虚拟用户：nobody 等，编号是 1-999，可以管理进程和数据，特点是不能登录系统，且没有家目录</li>
<li>系统普通用户：编号是1000+，辅助 root 用户管理系统(由 root 用户分配权限)</li>
<li>拓展：<code>su - linus</code> → 切换登录用户，root 用户切换到其他用户无需密码，但是其他用户切换到 root 用户需要输入密码</li>
<li>拓展： root 分配权限的方式<ol>
<li>将用户分配到指定组，再将权限分配到组</li>
<li>将某个数据的属主直接赋予给某个用户 → <code>chown oldboy /etc/hosts</code> → 修改某个数据的属主</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="4-4-5-文件权限"><a href="#4-4-5-文件权限" class="headerlink" title="4.4.5 文件权限"></a>4.4.5 文件权限</h4><ol>
<li>每个权限可以使用数值代表，<code>r → 4</code>、<code>w → 2</code>、<code>x → 1</code>、<code>- → 0</code></li>
<li>读权限、写权限、执行权限、无权限</li>
<li>正常情况下，文件数据权限有9位权限位，除此之外还有三个特殊权限位</li>
<li><code>find / -perm 666</code> → 根据权限查询</li>
</ol>
<h4 id="4-4-6-文件链接"><a href="#4-4-6-文件链接" class="headerlink" title="4.4.6 文件链接"></a>4.4.6 文件链接</h4><ol>
<li>软链接：<ol>
<li>相当于快捷方式，用于存放指向源文件的路径信息</li>
<li><code>ln -s linus.conf linus_soft_link.txt</code> → 创建一个新的软链接(<code>ln -s 源文件 链接文件</code>)</li>
<li>应用场景：对于要操作的文件数据提供方便<ol>
<li>命令文件：<code>ln -s /application/nginx/sbin/nginx /bin/nginx</code> ，无需配置 PATH</li>
<li>配置文件：<code>ln -s /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/ifcfg-eth0</code>，可以简化输入配置文件所在的路径</li>
<li>给开发人员加载服务程序带来方便</li>
</ol>
</li>
<li>特点：<ol>
<li>可以对文件或目录创建软链接</li>
<li>源文件删除之后，链接文件会失效(闪烁)</li>
</ol>
</li>
</ol>
</li>
<li>硬链接<ol>
<li>相当于访问文件的入口</li>
<li><code>ln linus.conf linus_hard_link.txt</code> → 创建一个新的硬链接</li>
<li>应用场景：防止文件(<code>不经常编辑且重要</code>的文件，可以创建硬链接防止丢失)进行<code>误删除</code>操作(cp 命令占用磁盘、大文件cp较慢)；对于配置文件使用 cp 命令备份，因为硬链接无法防止误修改</li>
<li>特点：<ol>
<li>源文件删除后，硬链接文件依然存在</li>
<li>硬链接文件只能针对文件创建，不能给目录创建硬链接</li>
<li>不能跨分区创建硬链接(跨分区可能出现 inode 相同的情况，即 inode 冲突)</li>
</ol>
</li>
<li>一个目录创建出来，默认会有两个硬链接数(一个是目录本身，一个是目录中的<code>.</code>)；如果存在子目录(子目录中<code>..</code>表示上级目录本身)，除去两个默认的硬链接数，剩余的数量表示子目录数量</li>
<li>可以通过 <code>find / -inum &quot;1353342&quot;</code> 查询硬链接相同的文件地址</li>
</ol>
</li>
<li>拓展：部署软件程序<ol>
<li>运维人员需要管理的：监控、网站服务、日志分析</li>
<li>运维人员需要部署的：MySQL-DBA、radis-开发人员</li>
</ol>
</li>
</ol>
<h4 id="4-4-7-文件时间"><a href="#4-4-7-文件时间" class="headerlink" title="4.4.7 文件时间"></a>4.4.7 文件时间</h4><ol>
<li><code>stat /etc/hosts</code> → 查看文件的详细属性，包括时间信息</li>
<li>时间类型<ol>
<li>Access time (atime)：访问时间，文件被查看打开的时间</li>
<li>Modify time (mtime)：修改时间，文件数据内容被改变的时间</li>
<li>Change time (ctime)：改变时间，文件属性信息变化的时间</li>
<li>Birth：创建时间，一般不关注</li>
</ol>
</li>
<li>date 命令<ol>
<li>查看时间<ol>
<li><code>date </code>→ <code>Fri Nov 20 12:14:17 CST 2020</code></li>
<li><code>date &quot;+%Y-%m-%d&quot;</code> → <code>2020-11-20</code></li>
<li><code>date &quot;+%Y-%m-%d %A %H:%M:%S&quot;</code> → <code>2020-11-20 Friday 12:19:23</code></li>
<li><code>date &quot;+%F&quot;</code> → <code>2020-11-20</code></li>
<li><code>date &quot;+%T&quot;</code> → <code>12:21:10</code></li>
<li><code>date -d &quot;-2 day&quot;</code> → 查看两天前的日期</li>
<li><code>date -d &quot;+2 day&quot;</code> → 查看两天后的日期，也可以忽略加号，即<code>date -d &quot;2 day&quot;</code></li>
<li><code>00:00</code> 及其之后的时间备份的是前一天的数据，所以需要将时间往前一天，即 <code>cp /etc/hosts /backup/hosts-$(date +%F -d &quot;-1 day&quot;)</code></li>
</ol>
</li>
<li>修改时间：<code>date -s &quot;2020-11-11 11:00:00&quot;</code> → 不写时分秒默认设置为 <code>00:00:00</code> → 可以手动调整时间进行一些定时任务的测试</li>
</ol>
</li>
</ol>
<h4 id="4-4-8-文件索引节点-inode"><a href="#4-4-8-文件索引节点-inode" class="headerlink" title="4.4.8 文件索引节点 inode"></a>4.4.8 文件索引节点 inode</h4><ol>
<li>inode：索引节点<ol>
<li>概念：用于存储文件数据的属性信息以及指针信息(指针指向数据存储的位置)</li>
<li>诞生：格式化磁盘时会创建相应数量的inode</li>
<li><code>df -i</code>：可查看分区中的 inode 数量</li>
<li>拓展：如何获取数据信息 → 读取或写入数据的原理<ol>
<li>首先根据路径信息，获取每个路径节点属性信息以及目录下的数据内容</li>
<li>根据路径信息，最终获取文件信息，根据文件属性设置，获取文件 block</li>
<li>最后可以查看数据内容</li>
</ol>
</li>
</ol>
</li>
<li>block：存储数据的数据块<ol>
<li>概念：用于真实存储数据信息的，一个文件对应一个或者多个 block</li>
<li>诞生：格式化磁盘时会创建相应数量的block</li>
<li><code>df</code> :可查看分区中的 block 数量</li>
<li>目录的block存储的是目录下的数据名称信息</li>
<li>拓展：磁盘空间什么时候会占满<ol>
<li>情况一：磁盘空间中的block数量不足 → 已经存储了大量的数据文件(大文件)</li>
<li>情况二：磁盘空间中的inode数量不足 → 已经存储了大量的数据文件(小文件)</li>
</ol>
</li>
<li>如何彻底删除数据<ol>
<li>文件的硬链接数为0，没有相同的 inode 被调用</li>
<li>文件没有被进程所调用</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="4-4-9-文件权限详细介绍"><a href="#4-4-9-文件权限详细介绍" class="headerlink" title="4.4.9 文件权限详细介绍"></a>4.4.9 文件权限详细介绍</h4><ol>
<li>普通文件<ol>
<li><code>r</code>：可以查看文件的真实数据</li>
<li><code>w</code>：可以编辑修改文件的真实内容</li>
<li><code>x</code>：文件可以直接执行使用(脚本文件)</li>
<li>对于普通文件，读权限是最重要的，只有具有读权限，文件才能正常的编辑或者执行</li>
</ol>
</li>
<li>目录<ol>
<li><code>r</code>：可以查看目录下有什么数据内容</li>
<li><code>w</code>：可以删除、添加、重命名目录下的数据内容</li>
<li><code>x</code>：可以进入到目录中</li>
<li>对于目录，最重要的是执行权限，只有具有执行权限，目录才能正常查看以及在目录中做创建、删除操作</li>
</ol>
</li>
<li>普通文件拓展<ol>
<li>对于 root 用户，天生拥有读和写的权限，即可以随意查看或编辑任意文件</li>
<li>root 用户如果想要执行某个文件，需要拥有执行权限才可以</li>
<li>属主用户<ol>
<li>只有读权限：可以读，可以强制修改，不能执行文件</li>
<li>只有写权限：不能读，可以修改(会覆盖原有内容)，不能执行文件</li>
<li>只有执行权限：如果没有读权限，也无法执行文件</li>
</ol>
</li>
</ol>
</li>
<li>目录拓展<ol>
<li>root 用户天生对于目录可以随意做任何操作，不论是否有权限</li>
<li>属主用户<ol>
<li>只有读权限：仅可以看到目录里的名称信息，且提示权限不够</li>
<li>只有写权限：不能创建</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="4-4-10-文件权限的修改"><a href="#4-4-10-文件权限的修改" class="headerlink" title="4.4.10 文件权限的修改"></a>4.4.10 文件权限的修改</h4><ol>
<li><code>chmod</code><ol>
<li>针对指定用户修改权限：<ol>
<li><code>chmod o+r /etc/shadow</code> → o 即 others ，针对其他用户添加权限</li>
<li><code>chmod o-r /etc/shadow</code> → o 即 others ，针对其他用户取消权限</li>
<li><code>chmod o=r /etc/shadow</code> → o 即 others ，针对其他用户设置权限</li>
<li>针对属主修改将 <code>o</code> 替换为 <code>u</code> 即可，即 user</li>
<li>针对属组修改将 <code>o</code> 修改为 <code>g</code> 即可，即 group</li>
</ol>
</li>
<li>批量修改用户权限<ol>
<li><code>chmod a+r /etc/shadow</code> → a 即 all，对所有用户添加、取消、设置相同的权限</li>
<li><code>chmod 760 /etc/shadow</code> → 使用数字针对不同用户设置权限</li>
</ol>
</li>
</ol>
</li>
<li><code>chown</code><ol>
<li>修改文件/目录属主：<code>chown linus /etc/shadow</code> → 修改属主为 linus</li>
<li>修改文件/目录属组：<code>chown .linus /etc/shadow</code> → 修改属组为 linus</li>
<li><code>chown linus.linus /etc/shadow</code> → 修改属主和属主为 linus → 无特殊需求时推荐属主和属组同时变</li>
</ol>
</li>
</ol>
<h4 id="4-4-11-权限的计算方法"><a href="#4-4-11-权限的计算方法" class="headerlink" title="4.4.11 权限的计算方法"></a>4.4.11 权限的计算方法</h4><ol>
<li><p>系统root创建文件或目录的默认权限</p>
<ol>
<li><p>文件：644</p>
</li>
<li><p>目录：755</p>
</li>
<li><p><code>umask</code> 命令用于设置权限计算参考值，root默认是022，普通默认是002，可以通过 <code>umask 022 </code>临时设置。</p>
</li>
<li><p>在 <code>/etc/profile</code> 中可以对 umask 进行永久修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $UID -gt 199 ] &amp;&amp; [ &quot;`/usr/bin/id -gn`&quot; = &quot;`/usr/bin/id -un`&quot; ]; then</span><br><span class="line">    umask 002</span><br><span class="line">else</span><br><span class="line">    umask 022</span><br><span class="line">fi</span><br><span class="line">===================================================</span><br><span class="line"><span class="meta">$</span><span class="bash">UID → 取当前用户的 uid 值</span></span><br><span class="line">gt → greater than 大于</span><br><span class="line">lt → less than 小于</span><br><span class="line">eq → equal 等于</span><br><span class="line">ge → 大于等于</span><br><span class="line">le → 小于等于</span><br><span class="line">ne → 不等于</span><br><span class="line">`/usr/bin/id -gn` → 显示组名称</span><br><span class="line">`/usr/bin/id -un` → 用户名称</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="2">
<li><p>计算方式</p>
<ol>
<li>文件：666 - umask = 666 - 022 = 644(注：如果 umask 出现奇数值，最后的计算结果没有读权限，即无意义，为了避免这种情况的出现，出现奇数时系统会自动在结果再加上011，即666-011=655;655+011=666，最终结果是666)</li>
<li>目录：777 - umask = 777 - 022 = 755(注：目录没有奇数和偶数的运算区别)</li>
</ol>
</li>
</ol>
<h4 id="4-4-12-用户相关命令介绍"><a href="#4-4-12-用户相关命令介绍" class="headerlink" title="4.4.12 用户相关命令介绍"></a>4.4.12 用户相关命令介绍</h4><ol>
<li><p><code>useradd linus</code> → 创建用户 linus</p>
</li>
<li><p><code>useradd linus -g dev</code> → 创建用户 linus 且分配到 dev 组中</p>
</li>
<li><p><code>useradd linus -u 3001 -g dev</code> → 创建用户 linus 且分配到 dev 组中，指定uid 为3001</p>
</li>
<li><p><code>useradd linus -g dev -G db sa -u 1001</code> → 创建用户 linus 且分配到 dev 、db、sa 组中，指定uid 为3001(-g 指定的是主要的组；-G 指定的是其他的附属组)</p>
</li>
<li><p><code>useradd linus -c &quot;web development&quot;</code> → 添加描述，可以在 <code>/etc/passwd</code> 中查看(<code>tail -5 /etc/passwd</code>)</p>
</li>
<li><p><code>useradd linus -M -s /sbin/nologin</code> → 创建虚拟用户 linus ( <code>-M</code> 代表不创建家目录；<code>-s</code> 代表指定用户登录系统的方式，<code>/bin/bash</code> 代表可以登录，<code>/sbin/nologin </code>代表不能登录)</p>
</li>
<li><p>更改登录方式 → <code>vim /etc/passwd</code>中修改对应的 <code>/bin/bash</code> 和 <code>/sbin/nologin </code> 即可</p>
</li>
<li><p><code>usermod</code>用于修改已有用户的设置，用法和参数与 useradd 一致</p>
</li>
<li><p><code>userdel linus</code> → 删除 linus 用户(删除不彻底，家目录还在)</p>
</li>
<li><p><code>userdel -r linus</code> → 删除 linus 用户及其家目录</p>
</li>
<li><p><code>su - linus</code> → 切换用户</p>
</li>
<li><p><code>passwd linus</code> → 交互式修改用户 linus 的密码(系统默认空密码不能登陆)</p>
</li>
<li><p><code>passwd</code> → 普通用户只能修改自己的密码，直接输入 passwd 即可(注：普通用户设置密码有密码长度和复杂度的要求→ 长度不能小于8位；密码需要有大小写特殊字符组合且不能重复)</p>
</li>
<li><p><code>echo 12345 | passwd --stdin linus</code>→ 非交互方式设置密码</p>
</li>
<li><p><code>groupadd dev</code> → 创建 dev 组</p>
</li>
<li><p><code>groupadd -g</code> → 指定用户组的 gid 值</p>
</li>
<li><p><code>id linus</code> → 查看用户 linus 的 uid、gid 等</p>
</li>
<li><p><code>id -u linus</code> → 查看 uid</p>
</li>
<li><p><code>id -g linus</code> → 查看 gid</p>
</li>
<li><p><code>w</code> → 查看当前系统登录用户及其相关信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">11:26:01 up 11:27,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE      JCPU      PCPU     WHAT</span><br><span class="line">root         pts/0    10.0.0.1                 08:28    1.00s     0.09s      0.00s        w</span><br><span class="line">=========================================================</span><br><span class="line">up 11:27 表示开机11小时27分钟</span><br><span class="line">TTY 表示登录方式 → pts 表示远程登录；tty 表示服务器上登录</span><br><span class="line">FROM 表示登录源地址</span><br><span class="line">LOGIN@ 表示登录时间</span><br><span class="line">IDLE 表示空闲状态时间</span><br><span class="line">JCPU 表示对CPU的占用情况</span><br><span class="line">PCPU  表示CPU消耗时间</span><br><span class="line">WHAT 表示执行操作，有 bash、w 等值</span><br></pre></td></tr></table></figure>
</li>
<li><p>拓展：用户和组的关系：一对一、一对多、多对一、多对多</p>
</li>
<li><p>拓展：</p>
<ol>
<li><p> 如何创建多个用户 oldboy01、oldboy02、oldboy03 并且每个用户密码信息为123456通过一条命令创建出来：<code>echo &#123;01..03&#125; | xargs -n1 | sed -r &quot;s/(..)/useradd oldboy\1;echo 12345 | passwd --stdin oldboy\1/g&quot;</code></p>
</li>
<li><p>如何创建多个用户 oldboy01、oldgirl02、oldbaby03 并且每个用户密码信息不一致，通过一条命令创建出来：</p>
<p><img src="04-linux-Linux%20%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95-img/image-20201124111846268.png" alt="image-20201124111846268"></p>
</li>
<li><p>踢掉某个登录用户</p>
<ol>
<li><code>ps -ef | grep ssh</code> → 查看已连接用户的 ssh 会话进程 id </li>
<li><code>kill 进程编号pid</code>→ 杀死某个进程(停止指定用户的会话进程等价于踢出指定用户)</li>
<li><code>kill -9 pid</code> → 强制杀死某个进程(慎用)</li>
<li> 防火墙可以防止某些用户的非法入侵</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="4-4-13-用户相关文件"><a href="#4-4-13-用户相关文件" class="headerlink" title="4.4.13 用户相关文件"></a>4.4.13 用户相关文件</h4><ol>
<li><p><code>/etc/passwd</code>：记录系统中所有用户信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root        :x        :0        :0        :root        :/root        :/bin/bash</span><br><span class="line">① 已有用户名</span><br><span class="line">② 之前用于存放密码，后来移到了 /etc/shadow 中</span><br><span class="line">③ 系统用户 uid 编号</span><br><span class="line">④ 系统用户 gid 编号</span><br><span class="line">⑤ 系统用户描述信息</span><br><span class="line">⑥ 系统用户家目录路径信息(该文件中虚拟用户对应的家目录没有任何意义)</span><br><span class="line">⑦ 系统用户登录方式</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>/etc/shadow</code>：记录系统用户的密码信息(<code>*</code>代表不需要设置密码；<code>!!</code> 代表没有设置密码)</p>
</li>
<li><p><code>/etc/group</code>：记录系统用户的组信息</p>
</li>
<li><p><code>/etc/gshadow</code>：记录系统用户组的密码信息</p>
</li>
</ol>
<h4 id="4-4-14-用户相关目录"><a href="#4-4-14-用户相关目录" class="headerlink" title="4.4.14 用户相关目录"></a>4.4.14 用户相关目录</h4><ol>
<li><code>/etc/skel</code> → 保存用户家目录模板文件信息<ol>
<li>家目录中<code>~/.bash_history</code><ol>
<li><code>history</code> → 用于查看曾经输入执行的历史命令</li>
<li><code>history -c</code> → 清除所有历史命令记录</li>
<li><code>history -w</code> → 将内存中保存的历史命令记录立即保存到<code>~/.bash_history</code>中</li>
</ol>
</li>
<li>家目录中的 <code>~/.bash_logout</code>：退出连接后需要执行的命令(与 <code>/etc/rc.local</code> 类似)</li>
<li>创建用户时：创建家目录 → <code>cp /etc/skel/* /home/username</code> </li>
<li>排错：普通用户命令提示符出现<code>-bash-4.2$</code>的情况，可能是自己的家目录被误删除了，可以通过<code>cp /etc/skel/.b* ~/</code> 进行家目录的修复</li>
</ol>
</li>
<li>拓展：xargs 的 -n 参数 → num 后面加次数，表示命令在执行的时候一次用的 argument 的个数，默认是用所有的。xargs -n1 表示每次只传递一个参数</li>
<li>拓展：<code>rpm -qf $(which locate)</code>：查看某个命令对应的软件包(包括版本号) </li>
</ol>
<h4 id="4-4-15-用户权限提权设置"><a href="#4-4-15-用户权限提权设置" class="headerlink" title="4.4.15 用户权限提权设置"></a>4.4.15 用户权限提权设置</h4><ol>
<li><p>概念：将root用户具有的能力分配给指定的用户进行使用</p>
</li>
<li><p>方法：</p>
<ol>
<li><p>设置指定用户特殊权限：<code>visudo</code> → 92行左右：<code>root ALL=(ALL) ALL</code> → root 代表指定授予特殊权限用户信息；ALL=(ALL)可以实现权限设置的集中管理；ALL代表具体赋予的特殊权限(命令需要使用绝对路径，多个用逗号隔开)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root                    ALL=(ALL)                   ALL</span><br><span class="line">linus                   ALL=(ALL)                   /bin/vim /etc/*, /bin/touch /etc/*</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询确认是否有特权设置：<code>sudo -l</code></p>
</li>
<li><p>行使赋予的特权：<code>sudo vim /etc/hosts</code> → 执行特权命令时需要在前面加上 sudo(相当于兵符)</p>
</li>
</ol>
</li>
<li><p>拓展：如何在使用特权时不用输入密码 → <code>visudo</code>→  <code>NOPASSWD: /bin/vim /etc/*, /bin/touch /etc/*</code></p>
</li>
<li><p>拓展：<code>visudo</code> → <code>vi /etc/sudoers</code></p>
</li>
<li><p>拓展：在设置特权时危险排除操作：<code>/bin/vim /etc/*, /bin/touch /etc/*, ! /bin/vim /etc/sudoers</code></p>
</li>
<li><p>拓展：系统内置命令特权操作是无法赋予给其他用户的</p>
</li>
</ol>
<h4 id="4-4-16-系统特殊权限设置"><a href="#4-4-16-系统特殊权限设置" class="headerlink" title="4.4.16 系统特殊权限设置"></a>4.4.16 系统特殊权限设置</h4><ol>
<li><p>系统有12位权限位，包括9个常用的权限位以及3个特殊权限位</p>
</li>
<li><p>3个特殊权限位分别为 setuid 权限位(针对属主位设置，值为4)、setgid 权限位(针对属组位设置，值为2)、sticky 权限位(设置其他用户设置，值为1)</p>
</li>
<li><p>setuid 权限位：</p>
<ol>
<li>作用：对命令文件设置特殊权限，让普通用户具有<code>命令文件属主</code>的执行能力</li>
<li><code>chmod u+s /bin/cat</code> → 通过 ll 查看时如果是 rws 时表示有x权限，如果是rwS时表示没有x权限→ 设置之后普通用户也可以 cat /etc/shadow 文件</li>
</ol>
</li>
<li><p>setgid 权限位：对命令文件设置特殊权限，让普通用户具有命令文件属组执行能力。格式为 <code>chmod g+s 命令文件</code></p>
</li>
<li><p>sticky 权限位</p>
<ol>
<li>可以在系统设置一个共享存储目录，目录中的数据可以互相查看，但是只能文件所有者自己进行编写和删除操作，不能被其他用户管理</li>
<li><code>chmod o+t /share/</code> → 权限位会多一个t</li>
</ol>
</li>
<li><p>输入<code>umask</code> 返回 0022，即第一位表示的是特殊权限位，使用chmod 修改权限时可以使用第一位设置特殊权限位</p>
</li>
<li><p>文件数据上锁权限设置</p>
<ol>
<li>文件被上锁设置后，系统中所有用户(包括root用户)均不能对文件进行编辑、删除操作</li>
<li>给文件加锁权限：<code>chattr +i /etc/hosts</code></li>
<li>查看文件是否上锁：<code>lsattr /etc/hosts</code></li>
<li>文件解锁：<code>chattr -i /etc/hosts</code> → 将 chattr 该命令路径 mv 到其他目录且重命名以此保护此命令不被黑客知道</li>
<li>作用：企业中可以将重要文件数据进行上锁保护</li>
</ol>
</li>
<li><p><code>setfacl</code>权限设置</p>
<ol>
<li>对文件设置访问控制列表，其作用是一个文件可以被多个指定用户、指定用户组进行管理。类似于一个文件有多个属主</li>
<li><code>getfacl /etc/hosts</code> → 查看文件的访问控制列表信息(权限)</li>
<li><code>setfacl -m user:linus:rw- /etc/hosts</code> → 此时linus用户具有和属主一样的读写权限，ll 查看时可以在9位权限后多出了一个加号</li>
<li><code>setfacl -m user:linus:rw- /etc/hosts</code> → 此时linus用户具有和属主一样的读写权限</li>
<li><code>setfacl -m group:dev:rw- /etc/hosts</code> → 此时dev用户组具有和属组一样的读写权限</li>
</ol>
</li>
<li><p>区别</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>举例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>变量取值</td>
<td>echo $price</td>
<td>99</td>
</tr>
<tr>
<td>${}</td>
<td>变量取值</td>
<td>echo ${price}</td>
<td>99</td>
</tr>
<tr>
<td>$()</td>
<td>返回其中的命令执行后的结果</td>
<td>echo $(date +%F)</td>
<td>2020-11-18</td>
</tr>
<tr>
<td>``</td>
<td>返回其中的命令执行后的结果</td>
<td>echo `date +%F`</td>
<td>2020-11-18</td>
</tr>
<tr>
<td>‘’</td>
<td>转义其中所有的变量为单纯的字符串</td>
<td>echo “It is $price”</td>
<td>It is 5</td>
</tr>
<tr>
<td>“”</td>
<td>保留其中的变量属性，不进行转义处理，信息中有空格时必须加””</td>
<td>echo ‘It is $price’</td>
<td>It is $price</td>
</tr>
<tr>
<td>没有引号</td>
<td>基本与””相同，输出序列信息时不能加””</td>
<td>echo “{01..02}”</td>
<td>{01..02}</td>
</tr>
<tr>
<td>^$</td>
<td>正则表示匹配空行</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>实践</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@aliyun ~]# price&#x3D;5</span><br><span class="line">[root@aliyun ~]# echo &quot;It is $price&quot;</span><br><span class="line">It is 5</span><br><span class="line">[root@aliyun ~]# echo &#39;It is $price&#39;</span><br><span class="line">It is $price</span><br><span class="line">[root@aliyun ~]# echo $price</span><br><span class="line">5</span><br><span class="line">[root@aliyun ~]# echo &#96;uname -a&#96;</span><br><span class="line">Linux aliyun 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br><span class="line">[root@aliyun ~]# echo $(uname -a)</span><br><span class="line">Linux aliyun 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br><span class="line">[root@aliyun ~]# echo $&#123;price&#125;</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：在无法正确区分变量的部分时，可以使用${}将变量名局限在{}中便于系统区分</p>
</li>
</ol>
<h3 id="4-6-sed-命令"><a href="#4-6-sed-命令" class="headerlink" title="4.6 sed 命令"></a>4.6 sed 命令</h3><h4 id="4-6-1-命令说明"><a href="#4-6-1-命令说明" class="headerlink" title="4.6.1 命令说明"></a>4.6.1 命令说明</h4><ol>
<li>sed 命令可以直接编辑修改文件内容</li>
<li>可以对文件进行：增、删、改、查的操作</li>
<li>语法格式：<code>sed 参数 &#39;条件 指令&#39; 文件信息</code></li>
<li>sed 命令的执行原理</li>
</ol>
<h4 id="3-6-2-查操作"><a href="#3-6-2-查操作" class="headerlink" title="3.6.2 查操作"></a>3.6.2 查操作</h4><ol>
<li><p>根据内容筛查文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;/Python/p&#x27; /etc/selinux/config     # 查看包含 Python 的行( -n 表示从模式空间出来时默认不输出，p 表示输出 )</span><br><span class="line">sed -rn &#x27;/^#|^$/!p&#x27; /etc/selinux/config     # 查看非空行和非注释的信息( -r 表示使用正则 )</span><br><span class="line">sed -rn &#x27;/linux/,/python/p&#x27; text.txt     # 查看 linux 行到 python 行区间的信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据行号筛查文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;3p&#x27; /etc/selinux/config     # 查看输出第三行内容</span><br><span class="line">sed -n &#x27;1,5p&#x27; /etc/selinux/config     # 查看输出第1~5行内容</span><br><span class="line">sed -n &#x27;1p;5p&#x27; /etc/selinux/config     # 查看输出第1、5行内容</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-6-3-删操作"><a href="#3-6-3-删操作" class="headerlink" title="3.6.3 删操作"></a>3.6.3 删操作</h4><ol>
<li>命令：将 <code>p 改为 d</code> 即可</li>
<li>使用<code>-i.bak</code> 参数可以在删除之前备份一个filename.bak的文件(备份路径与filename路径一致)</li>
<li>注意事项：在删除或修改数据时，<code>-i 参数与 -n 参数</code>不能同时出现，会清空文件</li>
<li><code>-i</code> 参数后面不能跟任何参数，即<code>-ri</code> 是允许的，<code>-ir</code> 是不允许的</li>
</ol>
<h4 id="3-6-4-增操作"><a href="#3-6-4-增操作" class="headerlink" title="3.6.4 增操作"></a>3.6.4 增操作</h4><ol>
<li><p>实践</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;$12345&#x27; text.txt     # 在最后一行添加 12345</span><br><span class="line">sed -i &#x27;1i12345&#x27; text.txt     # 第一行前面添加12345(1代表第一行，i 代表 insert，后面用a表示)</span><br><span class="line">前面或者后面插入多行：使用\n或者使用-e参数指定多个</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-6-5-改操作"><a href="#3-6-5-改操作" class="headerlink" title="3.6.5 改操作"></a>3.6.5 改操作</h4><p>…</p>
<h4 id="3-6-6-面试题"><a href="#3-6-6-面试题" class="headerlink" title="3.6.6 面试题"></a>3.6.6 面试题</h4><p>找出IP地址信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 sed</span></span><br><span class="line">ip a s eth0 | sed -rn &#x27;3s/^.*inet (.*)\/24.*/\1/gp&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-7-拓展：生成序列"><a href="#3-6-7-拓展：生成序列" class="headerlink" title="3.6.7 拓展：生成序列"></a>3.6.7 拓展：生成序列</h4><ol>
<li><code>seq -w 10</code></li>
<li><code>echo &#123;1..2&#125;&#123;a..b&#125;</code></li>
<li><code>echo 1&#123;a..b&#125;</code></li>
<li><code>cp /etc/hosts&#123;,.bak&#125;</code> → 当前目录下备份hosts.bak，原理是(a{,b} →  a ab)</li>
<li><code>cp /etc/hosts&#123;.bak,&#125;</code> → 通过 .bak 恢复 hosts 文件</li>
</ol>
<h3 id="3-6-awk"><a href="#3-6-awk" class="headerlink" title="3.6 awk"></a>3.6 awk</h3><ol>
<li><p>概念介绍：awk 擅长对列进行操作处理，也可以进行数据统计工作</p>
</li>
<li><p>格式：<code>awk [选项] &#39;模式&#123;动作&#125; [文件信息]&#39;</code>，多个动作之间用分号分隔开</p>
</li>
<li><p>实践</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询操作</span></span><br><span class="line">awk &#x27;/oldbaby/&#x27; ./awktest     # 查询包含 oldbaby 的行 → 根据数据内容找</span><br><span class="line">awk &#x27;NR==4&#x27; ./awktest     # 查询第四行的内容 → 根据行号找</span><br><span class="line">awk &#x27;/oldbaby/&#123;print $2,$5&#125;&#x27; ./awktest     # 查询包含 Oldbaby 的行的第二列和第五列，中间空格可以使用逗号，也可以使用$2&quot; &quot;$5明确指出</span><br><span class="line">awk -F &quot;[ ;]+&quot; &#x27;/oldbaby/&#123;print $2&#125;&#x27; ./awktest      # -F 表示在文件中空格和分号均作为列的分割符，+代表多个空格或者分号连在一起时作为一个间隔符使用</span><br><span class="line">awk &#x27;$2~/oldgirl/&#x27; ./awktest     # 第二列有 oldgirl 的信息，其中~代表匹配</span><br><span class="line">awk &#x27;$2!~/oldgirl/&#x27; ./awktest     # 除了第二列有 oldgirl 的其他行，其中!~代表不匹配</span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换操作 gsub(/待替换/,<span class="string">&quot;替换结果&quot;</span>,第几列)</span></span><br><span class="line">ip a s eth0 | awk &#x27;NR==3&#123;gsub(/\/24/,&quot;&quot;,$2);print $2&#125;&#x27; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 特殊模式 → BEGIN和END</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BEGIN&#123;&#125;：在处理文件之前做什么动作；可以实现计算器功能</span></span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;人员收入表&quot;&#125;&#123;print $0&#125;&#x27; ./awktest     # $0 表示所有列</span><br><span class="line">awk &#x27;BEGIN&#123;print 5+6&#125;&#x27;     # 计算(2^4→2的四次方；5%3→取模/取余)</span><br><span class="line"><span class="meta">#</span><span class="bash"> END&#123;&#125;：在处理文件之后做什么动作；将统计运算的结果进行输出</span></span><br><span class="line">awk &#x27;END&#123;print &quot;do something&quot;&#125;&#123;print $0&#125;&#x27; ./awktest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内置变量：NR(number records)代表行号、NF(number of fields)代表最后一列、FS(field separator)代表字段分隔符变量</span></span><br><span class="line">awk &#x27;&#123;print $(NF-1)&#125;&#x27; ./awktest     # 查看倒数第二列</span><br><span class="line">awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27; ./awktest     # 【-F &quot;;&quot;】等价于【&#x27;BEGIN&#123;FD=&quot;;&quot;&#125;&#x27; 】等价于【-vfS=&quot;;&quot;】</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计算法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 累加算法 i=i+1</span></span><br><span class="line">awk &#x27;$2~/oldboy/&#123;i++&#125;END&#123;print i&#125;&#x27; ./awktest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 求和算法 i=i+<span class="variable">$x</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">===================================================</span><br><span class="line">01  oldboy  13377778888  sa  15000;20000;2000</span><br><span class="line">02  oldgirl 14446667777  dev 16000;25000;2500</span><br><span class="line">03  oldbaby 16667778888  db  14000;18000;1800</span><br><span class="line">04  olddog  18888111222  net 10000;5000;500</span><br><span class="line">05  oldcat  18882288222  CTO 50000;50000;5000</span><br><span class="line">===================================================</span><br><span class="line">1. 显示oldboy的姓名和电话号码</span><br><span class="line">awk &#x27;$2~/oldboy/&#123;print $2,$3&#125;&#x27; ./awktest</span><br><span class="line">2. 姓名是oldgirl的人，显示绩效工资、补助工资、名字</span><br><span class="line">awk -F &quot;[ ;]+&quot; &#x27;$2~/oldgirl/&#123;print $6,$7,$2&#125;&#x27; ./awktest</span><br><span class="line">3. 显示所有电话号码以18开头的人的姓名、电话号码</span><br><span class="line">awk &#x27;$3~/^18/&#123;print $2,$3&#125;&#x27; ./awktest</span><br><span class="line">4. 显示所有电话号码以8或者7结尾的电话号码</span><br><span class="line">awk &#x27;$3~/8$|7$/&#123;print $3&#125;&#x27; ./awktest</span><br><span class="line">5. 显示olddog所有收入情况，且在薪资数值前加上人民币符号￥</span><br><span class="line">awk &#x27;$2~/olddog/&#123;gsub(/;/,&quot;￥&quot;,$5);print $2,$5&#125;&#x27; ./awktest</span><br><span class="line">6. IP 地址(ip a s eth0)</span><br><span class="line">ip a s eth0 | awk &#x27;NR==3&#123;gsub(/\/24/,&quot;&quot;,$2);print $2&#125;&#x27; </span><br><span class="line">ip a s eth0 | awk -F &quot;[ /]+&quot; &#x27;NR==3&#123;print $3&#125;&#x27;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
  </entry>
</search>
